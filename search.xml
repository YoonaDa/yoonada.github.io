<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2022/07/01/docker-chang-yong-ming-ling/"/>
      <url>/2022/07/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl start docker</code></pre><h2 id="关闭docker服务"><a href="#关闭docker服务" class="headerlink" title="关闭docker服务"></a>关闭docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl stop docker</code></pre><h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl restart docker</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><pre class=" language-shell"><code class="language-shell">docker search java</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull java:8</code></pre><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><pre class=" language-shell"><code class="language-shell">docker images</code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><ul><li>指定名称删除镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi java:8</code></pre><ul><li>指定名称删除镜像（强制）</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f java:8</code></pre><ul><li>删除所有没有引用的镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi `docker images | grep none | awk '{print $3}'`</code></pre><ul><li>强制删除所有镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f $(docker images)</code></pre><h2 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h2><ul><li>列出运行中的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><ul><li>列出所有容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><pre class=" language-shell"><code class="language-shell">docker stop $ContainerName(or $ContainerId)</code></pre><h2 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h2><pre class=" language-shell"><code class="language-shell">docker kill $ContainerName</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker start $ContainerName</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><ul><li>先查询出容器的pid</li></ul><pre class=" language-shell"><code class="language-shell">docker inspect --format "{{.State.Pid}}" $ContainerName</code></pre><ul><li>根据容器的pid进入容器</li></ul><pre class=" language-shell"><code class="language-shell">nsenter --target "$pid" --mount --uts --ipc --net --pid</code></pre><h2 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h2><pre class=" language-shell"><code class="language-shell">docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ContainerName</code></pre><h2 id="将容器启动方式改为always"><a href="#将容器启动方式改为always" class="headerlink" title="将容器启动方式改为always"></a>将容器启动方式改为always</h2><pre class=" language-shell"><code class="language-shell"># 将容器启动方式改为alwaysdocker container update --restart=always $ContainerName</code></pre><h2 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h2><pre class=" language-shell"><code class="language-shell">docker cp /etc/localtime $ContainerName:/etc/</code></pre><h2 id="指定容器时区"><a href="#指定容器时区" class="headerlink" title="指定容器时区"></a>指定容器时区</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-d nginx:1.17.0</code></pre><h2 id="查看容器资源占用状况"><a href="#查看容器资源占用状况" class="headerlink" title="查看容器资源占用状况"></a>查看容器资源占用状况</h2><ul><li>查看指定容器资源占用状况，比如cpu、内存、网络、io状态</li></ul><pre class=" language-shell"><code class="language-shell">docker stats $ContainerName</code></pre><ul><li>查看所有容器资源占用情况</li></ul><pre class=" language-shell"><code class="language-shell">docker stats -a</code></pre><h2 id="查看容器磁盘使用情况"><a href="#查看容器磁盘使用情况" class="headerlink" title="查看容器磁盘使用情况"></a>查看容器磁盘使用情况</h2><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><h2 id="执行容器内部命令"><a href="#执行容器内部命令" class="headerlink" title="执行容器内部命令"></a>执行容器内部命令</h2><pre class=" language-shell"><code class="language-shell">docker exec -it $ContainerName /bin/bash</code></pre><h2 id="指定账号进入容器内部"><a href="#指定账号进入容器内部" class="headerlink" title="指定账号进入容器内部"></a>指定账号进入容器内部</h2><pre class=" language-shell"><code class="language-shell"># 使用root账号进入容器内部docker exec -it --user root $ContainerName /bin/bash</code></pre><h2 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h2><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre><h2 id="创建外部网络"><a href="#创建外部网络" class="headerlink" title="创建外部网络"></a>创建外部网络</h2><pre class=" language-shell"><code class="language-shell">docker network create -d bridge my-bridge-network</code></pre><h2 id="指定容器网络"><a href="#指定容器网络" class="headerlink" title="指定容器网络"></a>指定容器网络</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \--network my-bridge-network \-d nginx:1.17.0</code></pre><h2 id="Docker容器清理"><a href="#Docker容器清理" class="headerlink" title="Docker容器清理"></a>Docker容器清理</h2><ul><li>查看Docker占用的磁盘空间情况</li></ul><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><ul><li>删除所有关闭的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm</code></pre><ul><li>删除所有dangling镜像(没有Tag的镜像)</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images | grep "^<none>" | awk "{print $3}")</code></pre><ul><li>删除所有dangling数据卷(即无用的 volume)</li></ul><pre class=" language-shell"><code class="language-shell">docker volume rm $(docker volume ls -qf dangling=true)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git配置ssh</title>
      <link href="/2022/07/01/git-pei-zhi-ssh/"/>
      <url>/2022/07/01/git-pei-zhi-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h2><pre class=" language-shell"><code class="language-shell">git config --global user.name "yoonada"</code></pre><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><pre class=" language-shell"><code class="language-shell">git config --global user.email "m15602498163@163.com"</code></pre><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h2><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "m15602498163@163.com"</code></pre><h2 id="生成路径"><a href="#生成路径" class="headerlink" title="生成路径"></a>生成路径</h2><pre class=" language-text"><code class="language-text">window的生成路径：C:\Users\用户\.sshLinux的生成路径：/etc/ssh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装RabbitMQ</title>
      <link href="/2022/07/01/docker-an-zhuang-rabbitmq/"/>
      <url>/2022/07/01/docker-an-zhuang-rabbitmq/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d --restart=always rabbitmq:management</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/2022/07/01/docker-an-zhuang-redis/"/>
      <url>/2022/07/01/docker-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name redis -p 6380:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass "DD123456aa"</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nacos</title>
      <link href="/2022/07/01/docker-an-zhuang-nacos/"/>
      <url>/2022/07/01/docker-an-zhuang-nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull nacos/nacos-server:1.4.2</code></pre><h2 id="创建临时容器（用来拷贝配置、日志使用）"><a href="#创建临时容器（用来拷贝配置、日志使用）" class="headerlink" title="创建临时容器（用来拷贝配置、日志使用）"></a>创建临时容器（用来拷贝配置、日志使用）</h2><pre class=" language-shell"><code class="language-shell">docker run -p 8848:8848 --name nacostest -d nacos/nacos-server:1.4.2</code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/conf</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/logs</code></pre><h2 id="配置文件复制"><a href="#配置文件复制" class="headerlink" title="配置文件复制"></a>配置文件复制</h2><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/logs/ /mydata/nacos/</code></pre><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/conf/ /mydata/nacos/</code></pre><h2 id="删除临时容器"><a href="#删除临时容器" class="headerlink" title="删除临时容器"></a>删除临时容器</h2><pre class=" language-shell"><code class="language-shell">docker stop nacostest</code></pre><pre class=" language-shell"><code class="language-shell">docker rm nacostest</code></pre><h2 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run -d \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_SERVICE_HOST=43.142.62.156 \-e MYSQL_SERVICE_PORT=3307 \-e MYSQL_SERVICE_USER=root \-e MYSQL_SERVICE_PASSWORD=DD123456aa \-e MYSQL_SERVICE_DB_NAME=nacos_config \-e TIME_ZONE='Asia/Shanghai' \-v /mydata/nacos/logs:/home/nacos/logs \-v /mydata/nacos/conf:/home/nacos/conf \-p 8848:8848 \--name nacos \--restart=always \nacos/nacos-server:1.4.2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL</title>
      <link href="/2022/07/01/docker-an-zhuang-mysql/"/>
      <url>/2022/07/01/docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取5-7的镜像"><a href="#拉取5-7的镜像" class="headerlink" title="拉取5.7的镜像"></a>拉取5.7的镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run --name mysql -p 3307:3306 --restart=always -e MYSQL_ROOT_PASSWORD=DD123456aa -d mysql:5.7</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-shell"><code class="language-shell">docker exec -it mysql bash</code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'DD123456aa';</code></pre><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos常用命令</title>
      <link href="/2022/07/01/centos-chang-yong-ming-ling/"/>
      <url>/2022/07/01/centos-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl start firewalld</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld</code></pre><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><pre class=" language-shell"><code class="language-shell">systemctl status firewalld </code></pre><h2 id="开放某个端口"><a href="#开放某个端口" class="headerlink" title="开放某个端口"></a>开放某个端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><h2 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a>查看已经开放的端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --list-ports</code></pre><h2 id="查找（在-中填写你要的查找的路径）"><a href="#查找（在-中填写你要的查找的路径）" class="headerlink" title="查找（在**中填写你要的查找的路径）"></a>查找（在**中填写你要的查找的路径）</h2><pre class=" language-shell"><code class="language-shell">find / -name **</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nginx</title>
      <link href="/2022/07/01/centos-an-zhuang-nginx/"/>
      <url>/2022/07/01/centos-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-shell"><code class="language-shell">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></pre><h2 id="下载稳定版本"><a href="#下载稳定版本" class="headerlink" title="下载稳定版本"></a>下载稳定版本</h2><pre class=" language-shell"><code class="language-shell">wget http://nginx.org/download/nginx-1.16.1.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf nginx-1.16.1.tar.gz</code></pre><h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd nginx-1.16.1</code></pre><h2 id="配置编译"><a href="#配置编译" class="headerlink" title="配置编译"></a>配置编译</h2><pre class=" language-shell"><code class="language-shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell">make && make install</code></pre><h2 id="被安装的目录"><a href="#被安装的目录" class="headerlink" title="被安装的目录"></a>被安装的目录</h2><pre class=" language-shell"><code class="language-shell">/usr/local/nginx/</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker-compose</title>
      <link href="/2022/07/01/centos-an-zhuang-docker-compose/"/>
      <url>/2022/07/01/centos-an-zhuang-docker-compose/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x /usr/local/bin/docker-compose</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker</title>
      <link href="/2022/07/01/centos-an-zhuang-docker/"/>
      <url>/2022/07/01/centos-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h2 id="安装配置相关依赖"><a href="#安装配置相关依赖" class="headerlink" title="安装配置相关依赖"></a>安装配置相关依赖</h2><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h2 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h2><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><h2 id="验证是否正确安装"><a href="#验证是否正确安装" class="headerlink" title="验证是否正确安装"></a>验证是否正确安装</h2><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://9w9zqgnf.mirror.aliyuncs.com"]}EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl daemon-reload</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos装机必备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
