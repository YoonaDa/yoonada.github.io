<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos搭建k8s集群</title>
      <link href="/2023/05/04/centos-da-jian-k8s-ji-qun/"/>
      <url>/2023/05/04/centos-da-jian-k8s-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>至少准备三台服务器，其中一台作为master，另外两台作为worker</p><ul><li>192.168.118.128（master）</li><li>192.168.118.129（worker）</li><li>192.168.118.130（worker）</li></ul><h3 id="在所有机器执行以下操作"><a href="#在所有机器执行以下操作" class="headerlink" title="在所有机器执行以下操作"></a>在所有机器执行以下操作</h3><pre class=" language-shell"><code class="language-shell">#各个机器设置自己的域名hostnamectl set-hostname xxxx</code></pre><pre class=" language-shell"><code class="language-shell"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）sudo setenforce 0sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</code></pre><pre class=" language-shell"><code class="language-shell">#关闭swapswapoff -a  sed -ri 's/.*swap.*/#&/' /etc/fstab</code></pre><pre class=" language-shell"><code class="language-shell">#允许 iptables 检查桥接流量cat <<EOF | sudo tee /etc/modules-load.d/k8s.confbr_netfilterEOF</code></pre><pre class=" language-shell"><code class="language-shell">cat <<EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo sysctl --system</code></pre><pre class=" language-shell"><code class="language-shell">cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgexclude=kubelet kubeadm kubectlEOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl enable --now kubelet</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee ./images.sh <<-'EOF'#!/bin/bashimages=(kube-apiserver:v1.20.9kube-proxy:v1.20.9kube-controller-manager:v1.20.9kube-scheduler:v1.20.9coredns:1.7.0etcd:3.4.13-0pause:3.2)for imageName in ${images[@]} ; dodocker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/$imageNamedoneEOF</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x ./images.sh && ./images.sh</code></pre><h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><pre class=" language-shell"><code class="language-shell">ip a</code></pre><p>获取到主节点的ip，并在所有机器执行如下命令：</p><pre class=" language-shell"><code class="language-shell">#所有机器添加master域名映射，以下需要修改为自己的echo "192.168.118.128  cluster-endpoint" >> /etc/hosts</code></pre><p>开始初始化主节点，<strong>注意要替换主节点的ip（apiserver-advertise-address的值）</strong></p><pre class=" language-shell"><code class="language-shell">#主节点初始化kubeadm init \--apiserver-advertise-address=192.168.118.128 \--control-plane-endpoint=cluster-endpoint \--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \--kubernetes-version v1.20.9 \--service-cidr=10.96.0.0/16 \--pod-network-cidr=192.168.0.0/16</code></pre><p>等待执行完成，会看到输出如下内容，先复制出来：</p><pre class=" language-text"><code class="language-text">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now join any number of control-plane nodes by copying certificate authoritiesand service account keys on each node and then running the following as root:  kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3 \    --control-plane Then you can join any number of worker nodes by running the following on each as root:kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p $HOME/.kube</code></pre><pre class=" language-shell"><code class="language-shell">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</code></pre><pre class=" language-shell"><code class="language-shell">sudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><pre class=" language-shell"><code class="language-shell">#查看集群所有节点kubectl get nodes</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504165734541.png"></p><h3 id="在master上安装calico"><a href="#在master上安装calico" class="headerlink" title="在master上安装calico"></a>在master上安装calico</h3><pre class=" language-shell"><code class="language-shell">vi calico.yaml</code></pre><p>我把配置文件存在oss上了，保存下来<br><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/calico.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/calico.yaml</a></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f calico.yaml</code></pre><h3 id="在work机器上（129、130）执行如下命令（上面复制那部分）："><a href="#在work机器上（129、130）执行如下命令（上面复制那部分）：" class="headerlink" title="在work机器上（129、130）执行如下命令（上面复制那部分）："></a>在work机器上（129、130）执行如下命令（上面复制那部分）：</h3><pre class=" language-shell"><code class="language-shell">kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504170721017.png"></p><h3 id="回到主节点（128）"><a href="#回到主节点（128）" class="headerlink" title="回到主节点（128）"></a>回到主节点（128）</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504170934242.png"></p><h3 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes-dashboard"></a>安装kubernetes-dashboard</h3><p>从oss下载下来</p><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml</a></p><p>搜索 centos01，替换为自己的master的主机名</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171217679.png"></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f dashboard.yaml</code></pre><pre class=" language-shell"><code class="language-shell">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</code></pre><pre class=" language-shell"><code class="language-shell">type: ClusterIP 改为 type: NodePort</code></pre><p>下载 dash.yaml<br><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml</a></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f dash.yaml</code></pre><p>查看登录token</p><pre class=" language-shell"><code class="language-shell">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath="{.secrets[0].name}") -o go-template="{{.data.token | base64decode}}"</code></pre><p>查看端口</p><pre class=" language-shell"><code class="language-shell">kubectl get svc -A |grep kubernetes-dashboard</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171641769.png"></p><p>主节点+ip访问控制台</p><p><a href="https://192.168.118.128:30125/#/login">https://192.168.118.128:30125/#/login</a></p><p>密码为刚才生成的token</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171753281.png"></p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window安装mysql</title>
      <link href="/2023/03/30/window-an-zhuang-mysql/"/>
      <url>/2023/03/30/window-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>我已经将其存在oss上了</p><p><a href="https://yoondada.oss-cn-shenzhen.aliyuncs.com/software/window/mysql-5.7.41-winx64.zip">https://yoondada.oss-cn-shenzhen.aliyuncs.com/software/window/mysql-5.7.41-winx64.zip</a></p><h3 id="移动解压重命名"><a href="#移动解压重命名" class="headerlink" title="移动解压重命名"></a>移动解压重命名</h3><p>E:\software\dev\mysql-5.7.41</p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p>新建data文件夹、my.ini配置文件</p><h3 id="编辑my-imi-（路径是左斜杠，右斜杆会报错）"><a href="#编辑my-imi-（路径是左斜杠，右斜杆会报错）" class="headerlink" title="编辑my.imi （路径是左斜杠，右斜杆会报错）"></a>编辑my.imi （路径是左斜杠，右斜杆会报错）</h3><pre class=" language-shell"><code class="language-shell">[client]port=3306 [mysql]default-character-set=utf8                 [mysqld]basedir = "E:/software/dev/mysql-5.7.41"         #需要更改为自己的安装目录datadir = "E:/software/dev/mysql-5.7.41/data"     #需要更改为自己的安装目录加上/dataport = 3306                      max_connections=200                   character-set-server=utf8          default-storage-engine=INNODB</code></pre><h3 id="配置环境变量-系统变量"><a href="#配置环境变量-系统变量" class="headerlink" title="配置环境变量-系统变量"></a>配置环境变量-系统变量</h3><ul><li>新建 MYSQL_HOME，值为：E:\software\dev\mysql-5.7.41</li><li>系统变量中找到Path，在末尾追加：%MYSQL_HOME%\bin</li></ul><h3 id="以系统管理员打开cmd"><a href="#以系统管理员打开cmd" class="headerlink" title="以系统管理员打开cmd"></a>以系统管理员打开cmd</h3><p>记得是<strong>系统管理员</strong></p><pre class=" language-shell"><code class="language-shell">cd E:\software\dev\mysql-5.7.41\bin</code></pre><pre class=" language-shell"><code class="language-shell">mysqld --initialize-insecure</code></pre><pre class=" language-shell"><code class="language-shell">mysqld -install</code></pre><pre class=" language-shell"><code class="language-shell">net start mysql</code></pre><h3 id="设置连接密码"><a href="#设置连接密码" class="headerlink" title="设置连接密码"></a>设置连接密码</h3><pre class=" language-shell"><code class="language-shell">mysqladmin -u root password DD123456aa</code></pre><h3 id="搞定"><a href="#搞定" class="headerlink" title="搞定"></a>搞定</h3><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre>]]></content>
      
      
      <categories>
          
          <category> window </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群搭建</title>
      <link href="/2023/03/29/hadoop-ji-qun-da-jian/"/>
      <url>/2023/03/29/hadoop-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul><li>三台centos服务器：<ul><li>192.168.253.130</li><li>192.168.253.131</li><li>192.168.253.132</li></ul></li><li>主机名修改对应为：<ul><li>centos-130 (主)</li><li>centos-131 </li><li>centos-132</li></ul></li></ul><h2 id="安装（在130（主））"><a href="#安装（在130（主））" class="headerlink" title="安装（在130（主））"></a>安装（在130（主））</h2><h3 id="分别修改主机名"><a href="#分别修改主机名" class="headerlink" title="分别修改主机名"></a>分别修改主机名</h3><p>eg.192.168.253.130将主机名修改为130</p><pre class=" language-shell"><code class="language-shell">hostnamectl set-hostname centos-130</code></pre><p>修改hosts文件</p><pre class=" language-shell"><code class="language-shell">vim /etc/hosts</code></pre><pre class=" language-shell"><code class="language-shell">192.168.253.130 centos-130192.168.253.131 centos-131192.168.253.132 centos-132</code></pre><p>重启一下吧，重新加载</p><pre class=" language-shell"><code class="language-shell">reboot</code></pre><h3 id="设置ssh免密登录"><a href="#设置ssh免密登录" class="headerlink" title="设置ssh免密登录"></a>设置ssh免密登录</h3><p>看之前的文章<br><a href="https://blog.yoonada.cn/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/">https://blog.yoonada.cn/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/</a></p><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><p>下载并上传至centos的/usr/local/<br><a href="https://dlcdn.apache.org/hadoop/common/hadoop-3.3.5/hadoop-3.3.5.tar.gz">https://dlcdn.apache.org/hadoop/common/hadoop-3.3.5/hadoop-3.3.5.tar.gz</a></p><p>解压</p><pre class=" language-shell"><code class="language-shell">tar -zxvf hadoop-3.3.5.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><pre class=" language-shell"><code class="language-shell"># HADOOP_HOMEexport HADOOP_HOME=/usr/local/hadoop-3.3.5export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATHexport HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib:$HADOOP_HOME/lib/native"</code></pre><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/etc/hadoop</code></pre><pre class=" language-shell"><code class="language-shell">vim hadoop-env.sh</code></pre><p>配置你本机的JAVA_HOME，可通过 echo $JAVA_HOME 查询</p><pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/local/jdk</code></pre><p><strong>root用户需多添加</strong></p><pre class=" language-shell"><code class="language-shell">export HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=root</code></pre><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim core-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>fs.defaultFS&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>hdfs<span class="token punctuation">:</span>//centos<span class="token punctuation">-</span>130<span class="token punctuation">:</span>8020&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>hadoop.tmp.dir&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>/usr/local/hadoop<span class="token punctuation">-</span>3.3.5/dfs/tmp&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>hadoop.http.staticuser.user&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>root&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim hdfs-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;property<span class="token punctuation">></span>    &lt;name<span class="token punctuation">></span>dfs.namenode.http<span class="token punctuation">-</span>address&lt;/name<span class="token punctuation">></span>    &lt;value<span class="token punctuation">></span>centos<span class="token punctuation">-</span>130<span class="token punctuation">:</span>9870&lt;/value<span class="token punctuation">></span>  &lt;/property<span class="token punctuation">></span>  &lt;property<span class="token punctuation">></span>    &lt;name<span class="token punctuation">></span>dfs.namenode.secondary.http<span class="token punctuation">-</span>address&lt;/name<span class="token punctuation">></span>    &lt;value<span class="token punctuation">></span>centos<span class="token punctuation">-</span>132<span class="token punctuation">:</span>9868&lt;/value<span class="token punctuation">></span>  &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim yarn-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;<span class="token tag">!--</span> 指定MR走shuffle <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">  &lt;property>    &lt;name>yarn.nodemanager.aux-services&lt;/name>    &lt;value>mapreduce_shuffle&lt;/value>  &lt;/property>  &lt;!-- 指定ResourceManager的地址-->  &lt;property>    &lt;name>yarn.resourcemanager.hostname&lt;/name>    &lt;value>centos-131&lt;/value>  &lt;/property>  &lt;!-- 环境变量的继承 -->  &lt;property>    &lt;name>yarn.nodemanager.env-whitelist&lt;/name>     &lt;value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;/value>  &lt;/property></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim mapred-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;<span class="token tag">!--</span> 指定MapReduce程序运行在Yarn上 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">  &lt;property>    &lt;name>mapreduce.framework.name&lt;/name>    &lt;value>yarn&lt;/value>  &lt;/property></span>&lt;/configuration<span class="token punctuation">></span></code></pre><pre class=" language-shell"><code class="language-shell">vim /usr/local/hadoop-3.3.5/etc/hadoop/workers</code></pre><pre class=" language-shell"><code class="language-shell">centos-130centos-131centos-132</code></pre><h2 id="迁移（131、132）"><a href="#迁移（131、132）" class="headerlink" title="迁移（131、132）"></a>迁移（131、132）</h2><h3 id="安装rsync"><a href="#安装rsync" class="headerlink" title="安装rsync"></a>安装rsync</h3><pre class=" language-shell"><code class="language-shell">yum install rsync -y </code></pre><h3 id="自定义xsync"><a href="#自定义xsync" class="headerlink" title="自定义xsync"></a>自定义xsync</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/bin/</code></pre><pre class=" language-shell"><code class="language-shell">vim xsync</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bash#1. 判断参数个数if [ $# -lt 1 ]then    echo Not Enough Arguement!    exit;fi#2. 遍历集群所有机器for host in centos-130 centos-131 centos-132do    echo ====================  $host  ====================    #3. 遍历所有目录，挨个发送    for file in $@    do        #4. 判断文件是否存在        if [ -e $file ]            then                #5. 获取父目录                pdir=$(cd -P $(dirname $file); pwd)                #6. 获取当前文件的名称                fname=$(basename $file)                ssh $host "mkdir -p $pdir"                rsync -av $pdir/$fname $host:$pdir            else                echo $file does not exists!        fi    donedone</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x xsync</code></pre><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><pre class=" language-shell"><code class="language-shell">xsync xsync</code></pre><pre class=" language-shell"><code class="language-shell">xsync /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">xsync /etc/profile</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h3><table><thead><tr><th></th><th>centos-130</th><th>centos-131</th><th>centos-132</th></tr></thead><tbody><tr><td>HDFS</td><td><strong>NameNode</strong>、DataNode</td><td>DataNode</td><td><strong>SecondaryNameNode</strong>、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td><strong>ResourcesManager</strong>、NodeManager</td><td>NodeManager</td></tr></tbody></table><h3 id="130（主）"><a href="#130（主）" class="headerlink" title="130（主）"></a>130（主）</h3><p><strong>如果是集群第一次启动，需要再主节点（130）格式化NameNode，此时为130</strong></p><pre class=" language-shell"><code class="language-shell">hdfs namenode -format</code></pre><p>启动HDFS</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">sbin/start-dfs.sh</code></pre><pre class=" language-shell"><code class="language-shell">jps</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329165730029.png"></p><p>页面访问</p><p><a href="http://192.168.253.130:9870/">http://192.168.253.130:9870/</a></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170029638.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170041264.png"><br>此时，<strong>HDFS的部署成功</strong><br><strong>131的启动情况：</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170440215.png"></p><p><strong>132的启动情况：</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170547930.png"></p><h3 id="131（配置了ResourceManager的节点）"><a href="#131（配置了ResourceManager的节点）" class="headerlink" title="131（配置了ResourceManager的节点）"></a>131（配置了ResourceManager的节点）</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">sbin/start-yarn.sh</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170839288.png"></p><p>输入网址</p><p><a href="http://192.168.253.131:8088/">http://192.168.253.131:8088/</a></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329171046395.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
          <category> centos </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> centos </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群搭建</title>
      <link href="/2023/03/24/redis-ji-qun-da-jian/"/>
      <url>/2023/03/24/redis-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://cloud.tencent.com/developer/article/2124382?areaSource=&amp;traceId=">https://cloud.tencent.com/developer/article/2124382?areaSource=&amp;traceId=</a></p><h3 id="基础环境安装"><a href="#基础环境安装" class="headerlink" title="基础环境安装"></a>基础环境安装</h3><ul><li>centos服务器三台<ul><li>192.168.253.130</li><li>192.168.253.131</li><li>192.168.253.132</li></ul></li><li>三台centos服务器都安装redis-5.0.14</li></ul><h4 id="基本安装（三台centos都安装）"><a href="#基本安装（三台centos都安装）" class="headerlink" title="基本安装（三台centos都安装）"></a>基本安装（三台centos都安装）</h4><pre class=" language-shell"><code class="language-shell">yum install gcc</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/</code></pre><pre class=" language-shell"><code class="language-shell">wget https://download.redis.io/releases/redis-5.0.14.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">tar -zxvf redis-5.0.14.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">cd redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">mkdir bin</code></pre><pre class=" language-shell"><code class="language-shell">make</code></pre><pre class=" language-shell"><code class="language-shell">cd src/</code></pre><pre class=" language-shell"><code class="language-shell">make install</code></pre><pre class=" language-shell"><code class="language-shell">cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server redis-sentinel /usr/local/redis-5.0.14/bin/</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14/bin</code></pre><pre class=" language-shell"><code class="language-shell">./redis-server ../redis.conf</code></pre><h3 id="Redis的主从配置"><a href="#Redis的主从配置" class="headerlink" title="Redis的主从配置"></a>Redis的主从配置</h3><p>下面给对应的centos服务器进行配置，其中130为主机，131、132为从机</p><table><thead><tr><th align="center">ip地址</th><th align="center">端口号</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.253.130</td><td align="center">6379</td><td align="center">主机（master）</td></tr><tr><td align="center">192.168.253.131</td><td align="center">6380</td><td align="center">从机（slave）</td></tr><tr><td align="center">192.168.253.132</td><td align="center">6381</td><td align="center">从机（slave）</td></tr></tbody></table><h4 id="192-168-253-130的redis-conf修改"><a href="#192-168-253-130的redis-conf修改" class="headerlink" title="192.168.253.130的redis.conf修改"></a>192.168.253.130的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6379protected-mode：nodaemonize：yeslogfile：redis.logrequirepass：DD123456aamasterauth：DD123456aa</code></pre><h4 id="192-168-253-131的redis-conf修改"><a href="#192-168-253-131的redis-conf修改" class="headerlink" title="192.168.253.131的redis.conf修改"></a>192.168.253.131的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6380protected-mode：nodaemonize：yeslogfile：./redis.logrequirepass：DD123456aamasterauth：DD123456aareplicaof 192.168.253.130 6379 </code></pre><h4 id="192-168-253-132的redis-conf修改"><a href="#192-168-253-132的redis-conf修改" class="headerlink" title="192.168.253.132的redis.conf修改"></a>192.168.253.132的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6381protected-mode：nodaemonize：yeslogfile：./redis.logrequirepass：DD123456aamasterauth：DD123456aareplicaof 192.168.253.130 6379 </code></pre><h3 id="Redis的哨兵模式"><a href="#Redis的哨兵模式" class="headerlink" title="Redis的哨兵模式"></a>Redis的哨兵模式</h3><h4 id="搭建（三台centos对应的redis都进行如下操作）"><a href="#搭建（三台centos对应的redis都进行如下操作）" class="headerlink" title="搭建（三台centos对应的redis都进行如下操作）"></a>搭建（三台centos对应的redis都进行如下操作）</h4><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">cp sentinel.conf sentinel.conf.bak</code></pre><pre class=" language-shell"><code class="language-shell">vim sentinel.conf</code></pre><p>修改如下：</p><pre class=" language-shell"><code class="language-shell">//端口默认为26379。port:26379//关闭保护模式，可以外部访问。protected-mode:no//设置为后台启动。daemonize:yes//日志文件。logfile:sentinel.log//指定主机IP地址和端口，并且指定当有2台哨兵认为主机挂了，则对主机进行容灾切换。sentinel monitor mymaster 192.168.253.130 6379 2//当在Redis实例中开启了requirepass，这里就需要提供密码。sentinel auth-pass mymaster DD123456aa//这里设置了主机多少秒无响应，则认为挂了。sentinel down-after-milliseconds mymaster 3000//主备切换时，最多有多少个slave同时对新的master进行同步，这里设置为默认的1。sentinel parallel-syncs mymaster 1//故障转移的超时时间，这里设置为三分钟。sentinel failover-timeout mymaster 180000</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14/bin</code></pre><pre class=" language-shell"><code class="language-shell">./redis-sentinel ../sentinel.conf</code></pre><pre class=" language-shell"><code class="language-shell">ps -axu|grep redis</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324152509371.png"></p><pre class=" language-shell"><code class="language-shell">redis-cli -p 26379</code></pre><pre class=" language-shell"><code class="language-shell">info sentinel</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324153115011.png"></p><h4 id="容灾切换"><a href="#容灾切换" class="headerlink" title="容灾切换"></a>容灾切换</h4><p>现在我们模拟主机宕机，将主机 redis 服务关闭，如下</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324153813734.png"></p><p>去原本的从机131、132看。会发现主机变为132了</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324154028853.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324154357699.png"></p><h3 id="Redis集群模式"><a href="#Redis集群模式" class="headerlink" title="Redis集群模式"></a>Redis集群模式</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">mkdir cluster</code></pre><pre class=" language-shell"><code class="language-shell">cd cluster</code></pre><pre class=" language-shell"><code class="language-shell">mkdir 7000 7001 7002 7003 7004 7005</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/redis.conf.bak /usr/local/redis-5.0.14/cluster/7000/redis.conf</code></pre><p>每个文件夹里，要<strong>对应一个redis.conf</strong>（稍做修改）</p><pre class=" language-shell"><code class="language-shell"># 端口号bind  注释掉port 7000# 开启集群模式cluster-enabled yes# 设置保存节点配置文件的路径，默认值为 nodes-6379.conf。根据端口号更换cluster-config-file  nodes-7000.conf# 设置节点超时时间cluster-node-timeout 5000# 设置是否开启 aof 模式，对数据库完整性要求比较高可以开启appendonly no# 设置为后端启动daemonize yesprotected-mode no</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/src/redis-server /usr/local/redis-5.0.14/cluster/</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/src/redis-cli /usr/local/redis-5.0.14/cluster/</code></pre><pre class=" language-shell"><code class="language-shell">vim start-all.sh</code></pre><pre class=" language-shell"><code class="language-shell">cd 7000../redis-server ./redis.confcd ..cd 7001../redis-server ./redis.confcd ..cd 7002../redis-server ./redis.confcd ..cd 7003../redis-server ./redis.confcd ..cd 7004../redis-server ./redis.confcd ..cd 7005../redis-server ./redis.confcd ..</code></pre><p>此时，拥有这些</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164305671.png"></p><p>执行脚本，启动这六个redis</p><pre class=" language-shell"><code class="language-shell">sh start-all.sh</code></pre><pre class=" language-shell"><code class="language-shell">ps -aux | grep redis</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164343172.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164422033.png"></p><p>启动集群</p><pre class=" language-shell"><code class="language-shell">/usr/local/redis-5.0.14/cluster/redis-cli --cluster create 192.168.253.130:7000 192.168.253.130:7001 192.168.253.130:7002 192.168.253.130:7003 192.168.253.130:7004 192.168.253.130:7005 --cluster-replicas 1</code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
          <category> centos </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 集群 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/15/docker-an-zhuang-kafka/"/>
      <url>/2023/03/15/docker-an-zhuang-kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-sh"><code class="language-sh">docker pull wurstmeister/zookeeper</code></pre><pre class=" language-sh"><code class="language-sh">docker pull wurstmeister/kafka</code></pre><h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h2><h3 id="启动Zookeeper"><a href="#启动Zookeeper" class="headerlink" title="启动Zookeeper"></a>启动Zookeeper</h3><pre class=" language-sh"><code class="language-sh">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper</code></pre><pre class=" language-sh"><code class="language-sh">docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.118.128:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.118.128:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka    docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=10.0.16.11:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.0.16.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka  docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.17.0.7:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.0.16.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka  10.0.16.11</code></pre><pre class=" language-sh"><code class="language-sh">docker run -d \    -p 9001:8080 \    -v /opt/kafka-map/data:/usr/local/kafka-map/data \    -e DEFAULT_USERNAME=admin \    -e DEFAULT_PASSWORD=admin \    --name kafka-map \    --restart always dushixiang/kafka-map:latest</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记总结</title>
      <link href="/2023/02/01/mysql-xue-xi-bi-ji-zong-jie/"/>
      <url>/2023/02/01/mysql-xue-xi-bi-ji-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL的存储引擎"><a href="#MySQL的存储引擎" class="headerlink" title="MySQL的存储引擎"></a>MySQL的存储引擎</h3><p>比较常用的：MyISAM、InnoDB</p><ul><li>MyISAM：拥有较高的插入查询速度，但不支持事务，使用表级锁，并发性差，灾难恢复性不佳。MySQL 5.5.5 之前，MyISAM 是 MySQL 的默认存储引擎。</li><li>InnoDB：支持ACID事务，支持行级锁和表级锁，默认使用行级锁，支持外键关联，支持热备份，灾难恢复性好。5.5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。</li></ul><h4 id="MyISAM和InnoDB该如何选择"><a href="#MyISAM和InnoDB该如何选择" class="headerlink" title="MyISAM和InnoDB该如何选择"></a>MyISAM和InnoDB该如何选择</h4><ul><li>InnoDB支持事务、外键、MVCC而MyISAM都不支持</li><li>MyISAM适合频繁查询的应用，适合小数据，小并发而InnoDB适合插入和更新操作比较多的应用，大数据、高并发。</li></ul><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成一种排序好的数据结构</strong></p><h5 id="索引底层数据结构"><a href="#索引底层数据结构" class="headerlink" title="索引底层数据结构"></a>索引底层数据结构</h5><ul><li>B树</li><li>B+树</li><li>Hash、红黑树</li></ul><p>在MySQL中，无论是InnoDB还是MyISAM，都使用了B+树作为索引结构</p><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>大大加快了数据的检索速度</li><li>通过创建唯一性索引，可以保证数据库表中数据的唯一性</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>创建维护索引需要耗费很多时间。当对表中数据进行增删改的时候，如果数据有索引，那么索引也需要动态修改，会降低SQL执行效率</li><li>索引需要使用物理文件存储，也会耗费一定空间</li></ul><h4 id="使用索引一定能提高查询性能吗"><a href="#使用索引一定能提高查询性能吗" class="headerlink" title="使用索引一定能提高查询性能吗"></a>使用索引一定能提高查询性能吗</h4><p>大多数情况下，索引查询都是比全表查询要快的，但如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升</p><h4 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h4><h5 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h5><p>哈希表是键值对的集合，通过键（key）即可快速取出对应的值（value），因此哈希表可以快速检索数据</p><p><strong>为何能够通过key快速取出value呢？</strong> 原因在于哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到key对应的index，找到了index也就找到了对应的value。 但是！哈希算法有个<strong>Hash冲突</strong>的问题。</p><p><strong>何为哈希冲突？</strong> 也就是说多个不同的key最后得到的index是相同的。</p><p>通常情况下，我们常用的解决办法是<strong>链地址法</strong>。<strong>链地址法就是将哈希冲突的数据存放在链表中</strong>。<br>就比如JDK1.8之前 HashMap 就是通过链地址法来解决哈希冲突的。不过，JDK1.8以后，HashMap为了减少链表过长的时候搜索时间过长，就引入了红黑树。</p><p>既然哈希表这么快，<strong>为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为Hash索引不支持顺序和范围查询。</strong> 假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。<br>试想一种情况:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span></code></pre><p>在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。</p><h5 id="B树-amp-B-树"><a href="#B树-amp-B-树" class="headerlink" title="B树&amp;B+树"></a>B树&amp;B+树</h5><p>B树也称为B-树，全称为<strong>多路平衡查找树</strong>，B+树是B树的一种变体。B树和B+树中的B是Balance（平衡）的意思。目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p><p><strong>B树&amp;B+树两者有何异同</strong></p><ul><li>B树的所有节点既存放键（key）也存放数据（data），而B+树只有叶子节点存放key和data，其他节点只存放key</li><li>B树的叶子节点都是独立的；B+树的叶子节点有一条引用链指向与它相邻的叶子节点</li><li>B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li></ul><p><strong>为啥使用B+树而不使用B树</strong></p><ul><li>B树只适合随机检索，而B+树同时支持随机检索和顺序检索</li><li>B+树的空间利用率更高，更稳定，范围查询性能更优</li></ul><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>索引类型分为两大类：主键索引、二级索引<br>细分的话，分为：</p><ul><li>主键索引</li><li>唯一索引</li><li>普通索引</li><li>空间索引</li><li>全文索引</li></ul><h5 id="主键索引（Primary-Key）"><a href="#主键索引（Primary-Key）" class="headerlink" title="主键索引（Primary Key）"></a>主键索引（Primary Key）</h5><p>数据表的主键列使用的就是主键索引，一个数据表只能有一个主键，并且主键不能为null，不能重复。</p><p>在MySQL的InnoDB的表中，当没有显示指定表的主键时，InnoDB会自动先检查表中是否有唯一索引且不允许存在null值的字段，如果有，则选择改字段为默认的主键，否则InnoDB会自动创建一个6Byte的自增主键。</p><h5 id="二级索引（辅助索引）"><a href="#二级索引（辅助索引）" class="headerlink" title="二级索引（辅助索引）"></a>二级索引（辅助索引）</h5><p><strong>二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。</strong></p><ul><li>唯一索引（Unique Key）</li><li>普通索引（Index）</li><li>前缀索引（Prefix）</li><li>全文索引（Full Text）</li></ul><h6 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h6><p>唯一索引也是一种约束，唯一索引的属性列不能出现重复的数据，但是允许数据为null，一张表允许创建多个唯一索引。</p><h6 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h6><p>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和null。</p><h6 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h6><p>前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。</p><h6 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h6><p>全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6之后InnoDB也支持了全文索引。</p><h4 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h4><h5 id="聚簇索引（聚集索引）"><a href="#聚簇索引（聚集索引）" class="headerlink" title="聚簇索引（聚集索引）"></a>聚簇索引（聚集索引）</h5><p><strong>聚簇索引即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB中的主键索引就属于聚簇索引。</strong></p><h5 id="聚簇索引的优缺点"><a href="#聚簇索引的优缺点" class="headerlink" title="聚簇索引的优缺点"></a>聚簇索引的优缺点</h5><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ul><li><strong>查询速度非常快</strong>：因为整个B+树本身就是一颗多叉平衡树，叶子节点也是有序的，定位到索引的节点，就相当于定位到了数据。相对于非聚簇索引，聚簇索引少了一次读取数据的IO操作</li><li><strong>对排序查询和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快</li></ul><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ul><li><strong>依赖于有序的数据</strong></li><li><strong>更新代价大</strong></li></ul><h5 id="非聚簇索引（非聚集索引）"><a href="#非聚簇索引（非聚集索引）" class="headerlink" title="非聚簇索引（非聚集索引）"></a>非聚簇索引（非聚集索引）</h5><p><strong>非聚簇索引即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引（辅助索引）就属于非聚簇索引。MySQL的MyISAM引擎，不管主键还是非主键，使用的都是非聚簇索引</strong><br>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</p><h5 id="非聚簇索引的优缺点"><a href="#非聚簇索引的优缺点" class="headerlink" title="非聚簇索引的优缺点"></a>非聚簇索引的优缺点</h5><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><p>更新代价比聚簇索引要小，因为其叶子节点不存放数据</p><h6 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h6><ul><li><strong>依赖于有序的数据：</strong> 跟聚簇索引一样，非聚簇索引也依赖于有序的数据</li><li>可能会二次查询（回表）：这个应该是非聚簇索引最大的缺点了，当查到索引对于的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询</li></ul><h4 id="覆盖索引和联合索引"><a href="#覆盖索引和联合索引" class="headerlink" title="覆盖索引和联合索引"></a>覆盖索引和联合索引</h4><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要回表，也就是通过主键再查找一次，<br>这样会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。</p><p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询</strong><br>如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。</p><p>再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。</p><h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h5><p>使用表中的多个字段创建索引，就是<strong>联合索引</strong>，也叫<strong>组合索引</strong>或<strong>复合索引</strong></p><h4 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h4><p>指在使用联合索引时，MySQL会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询，如 &gt;、&lt;、between 和 以%开头的like查询 等条件，才会停止匹配。</p><h4 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h4><ul><li>使用select * 进行查询</li><li>创建了组合索引但查询条件未遵守最左匹配原则</li><li>在索引列上进行计算、函数、类型转换等操作</li><li>以%开头的like查询，比如 like ‘%abc%’</li><li>查询条件中使用or，并且or的前后条件有一个列没有索引，涉及的索引都不会被使用到</li></ul><h4 id="什么是事务-amp-事务基本特性是啥"><a href="#什么是事务-amp-事务基本特性是啥" class="headerlink" title="什么是事务&amp;事务基本特性是啥"></a>什么是事务&amp;事务基本特性是啥</h4><p>事务指的是满足ACID特性的一组操作，可以通过Commit提交一个事务，也可以使用Rollback进行回滚</p><h5 id="事务基本特性ACID？"><a href="#事务基本特性ACID？" class="headerlink" title="事务基本特性ACID？"></a>事务基本特性ACID？</h5><ul><li>A（atomicity）原子性：事务是一个不可分割的整体，事务的所有操作要么全部成功，要么全部回滚；</li><li>C（consistency）一致性：指的是数据库总是从一个一致性的状态转换到另外一个一致性的状态。比如：A转账给B，100块钱，假如中间sql执行过程中系统崩溃A也不会损失100块，因为事务没有提交，修改就不会被保存到数据库</li><li>I（isolation）隔离性：指的是一个事务的修改在最终提交前，对其他事务是不可见的</li><li>D（durability）持久性：指的是一旦事务提交，所做的修改就会永久保存到数据库中</li></ul><h5 id="脏读-amp-amp-不可重复读-amp-amp-幻读（虚读）"><a href="#脏读-amp-amp-不可重复读-amp-amp-幻读（虚读）" class="headerlink" title="脏读&amp;&amp;不可重复读&amp;&amp;幻读（虚读）"></a>脏读&amp;&amp;不可重复读&amp;&amp;幻读（虚读）</h5><h6 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h6><p>脏读：事务A读取到事务B未提交的数据，然后事务B回滚，那么事务A读取到的数据就是脏数据</p><p>比如我给你转100万，但我还没提交，这时你查询自己账户多了100万，然后我发现转错人了，回滚了事务，然后你100万没了，在这个过程中，你查询到我未提交的事务数据（100万）就是脏读</p><h6 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h6><p>不可重复读：事务A进行多次读取操作，事务B在事务A多次读取的过程中，执行更新操作并提交，导致事务A读取到的数据先后不一致。</p><p>T2 读取一个数据，T1 对该数据做了<strong>修改</strong>。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><h6 id="幻读（虚读）"><a href="#幻读（虚读）" class="headerlink" title="幻读（虚读）"></a>幻读（虚读）</h6><p>事务A首先根据条件得到N条数据，事务B增添了M条符合事务A搜索条件的数据，导致事务A再次搜素发现有N+M条数据，就产生了幻读。</p><p>T1 读取某个范围的数据，T2 在这个范围内<strong>插入</strong>新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><h6 id="不可重复读和幻读有什么区别"><a href="#不可重复读和幻读有什么区别" class="headerlink" title="不可重复读和幻读有什么区别"></a>不可重复读和幻读有什么区别</h6><ul><li>不可重复读的重点是内容修改或记录减少</li><li>幻读的重点在于新增</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul><li>读未提交（READ-UNCOMMITTED）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</li><li>读已提交（READ-COMMITTED）：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</li><li>可重复读（REPEATABLE-READ）：对同一字段的多次读取结果是一致的，除非数据被自身事务所修改，可以阻止脏读和不可重复读</li><li>可串行化（SERIALIZABLE）:最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读</li></ul><h4 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h4><h5 id="表级锁和行级锁"><a href="#表级锁和行级锁" class="headerlink" title="表级锁和行级锁"></a>表级锁和行级锁</h5><ul><li>表级锁：粒度大，针对非索引字段加的锁，资源消耗少，加锁快，不会出现死锁，但高并发下效率极低。</li><li>行级锁：粒度小，针对索引字段加的锁，只针对当前操作的行记录加锁，并发性高，但开销也大，会出现死锁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/11/17/shu-ju-jie-gou/"/>
      <url>/2022/11/17/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>数据结构是为实现对计算机数据有效使用的各种数据组织形式，服务于各类计算机操作。不同的数据结构具有各自对应的适用场景，旨在降低各种算法计算的时间与空间复杂度，达到最佳的任务执行效率</p><h2 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h2><p>常见的数据结构可以分为 <strong>线性数据结构</strong> 与 <strong>非线性数据结构</strong></p><h3 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h3><ul><li>数组（Array）</li><li>链表（Linked List）</li><li>栈（Stack）</li><li>队列（Queue）</li></ul><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h4><p>数组是将相同类型的元素存储在连续内存空间的数据结构，其长度不可变。<br>构建数组需要在初始化时给定长度，并对数组每个索引元素赋值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一：初始化一个长度为5的数组 array</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素赋值</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式二：使用直接赋值的初始化方式</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>可变数组</strong>是经常使用的数据结构，基于数组和扩容机制实现，相比普通数组更加灵活。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化可变数组</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向尾部添加元素</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表 (Linked List)"></a>链表 (Linked List)</h4><p>链表以节点为单位，每个元素都是一个独立的对象，在内存空间的存储是非连续的。<br>链表的节点对象具有两个成员变量： <strong>值（val）</strong>、<strong>后继节点引用（next）</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171458499.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 节点值</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后继节点引用</span>        ListNode next<span class="token punctuation">;</span>        <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实例化节点</span>    <span class="token comment" spellcheck="true">// 节点head</span>    ListNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建引用指向</span>    n1<span class="token punctuation">.</span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span>    </code></pre><h4 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h4><p>栈是一种具有 <strong>“先入后出”</strong> 特点的抽象数据结构，可使用数组或链表实现</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171504650.png"></p><pre class=" language-java"><code class="language-java">    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1进栈</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2进栈</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 出栈 -> 元素2</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素1</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：通常情况下，<strong>不推荐使用Java的Vector以及其子类Stack</strong>，而<strong>一般将LinkedList作为栈</strong>来使用。实现如下：</p><pre class=" language-java"><code class="language-java">    LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1入栈</span>    stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2入栈</span>    stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素2</span>    stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素1</span>    stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h4><p>队列是一种具有 <strong>“先入先出”</strong> 特点的抽象数据结构，可使用链表实现</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171518429.png"></p><pre class=" language-java"><code class="language-java">    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1入队</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2入队</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除第一个</span>    <span class="token comment" spellcheck="true">// 出队 -> 元素1</span>    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出队 -> 元素2</span>    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h3><ul><li>树（Tree）</li><li>堆（Heap）</li><li>散列表（Hashing）</li><li>图（Graph）</li></ul><h4 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（Tree）</h4><p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。<br>以二叉树为例，每个节点包含三个成员变量：<strong>「值 val」、「左子节点 left」、「右子节点 right」</strong> 。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171533713.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 节点值</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左子节点</span>        TreeNode left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 右子节点</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化节点</span>    <span class="token comment" spellcheck="true">// 根节点 root</span>    TreeNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建引用指向</span>    n1<span class="token punctuation">.</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n1<span class="token punctuation">.</span>right <span class="token operator">=</span> n3<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>left <span class="token operator">=</span> n4<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>right <span class="token operator">=</span> n5<span class="token punctuation">;</span>      </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识总结</title>
      <link href="/2022/11/16/zhi-shi-zong-jie/"/>
      <url>/2022/11/16/zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="JVM-amp-JDK-amp-JRE"><a href="#JVM-amp-JDK-amp-JRE" class="headerlink" title="JVM&amp;JDK&amp;JRE"></a>JVM&amp;JDK&amp;JRE</h3><ul><li>JDK（Java Development Kit）：Java开发工具包，提供了Java的开发环境和运行环境</li><li>JRE（Java Runtime Environment）：Java运行时环境，为Java运行提供所需的环境</li><li>JVM：Java虚拟机</li></ul><p>具体来说 <strong>JDK 其实包含了 JRE</strong>，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h3 id="什么是字节码"><a href="#什么是字节码" class="headerlink" title="什么是字节码"></a>什么是字节码</h3><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件）</p><h3 id="Java和C-的区别"><a href="#Java和C-的区别" class="headerlink" title="Java和C++的区别"></a>Java和C++的区别</h3><ul><li>Java不提供指针来直接访问内存，程序内存更加安全；</li><li>Java的类是单继承，C++支持多重继承；</li><li>Java有自动内存管理垃圾回收机制（GC），不需要程序员手动释放无用内存</li></ul><h3 id="continue、break和return的区别是什么"><a href="#continue、break和return的区别是什么" class="headerlink" title="continue、break和return的区别是什么"></a>continue、break和return的区别是什么</h3><ul><li>continue：指跳出当前的这一次循环，继续下一次循环</li><li>break：指跳出整个循环体，继续执行循环体下面的语句</li><li>return：用于跳出所在方法，结束该方法的运行</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="成员变量和局部变量的区别？"><a href="#成员变量和局部变量的区别？" class="headerlink" title="成员变量和局部变量的区别？"></a>成员变量和局部变量的区别？</h4><h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h3><ul><li><strong>面向过程</strong>：<strong>是分析解决问题的步骤</strong>，然后用函数把这些步骤一步一步地实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发</li><li><strong>面向对象</strong>：是把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事物在<strong>解决整个问题的过程中所发生的行为</strong>。面向对象有<strong>封装、继承、多态</strong>的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。 但是性能上来说，比面向过程要低。</li></ul><h3 id="重写（Override）和重载（Overload）的区别"><a href="#重写（Override）和重载（Overload）的区别" class="headerlink" title="重写（Override）和重载（Overload）的区别"></a>重写（Override）和重载（Overload）的区别</h3><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><ul><li>发生在父子类之间</li><li><strong>方法名</strong>、<strong>参数列表</strong>、<strong>返回类型</strong>必须相同</li><li>访问修饰符的限制一定要大于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private）</li><li>重写方法一定不能排除新的检查异常或者比被重写方法声明更加宽泛的检查型异常</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><ul><li>重载是一个类中多态性的一种表现</li><li>重载要求同名方法的参数列表不同（参数类型、参数个数、参数顺序）</li><li>重载的时候，返回值类型可以相同也可以不同</li></ul><h3 id="equals与-x3D-x3D-的区别"><a href="#equals与-x3D-x3D-的区别" class="headerlink" title="equals与==的区别"></a>equals与==的区别</h3><ul><li>==比较的是两个对象的内存地址，即它们是否指向同一个对象。而equals()比较的是两个对象的内容是否相同，即它们是否具有相同的值</li><li>对于基本数据类型（byte、short、int、long、float、double、char、boolean），==比较的是它们的值是否相等，而不是地址是否相等</li><li>对于引用类型（对象），==比较的是它们在内存中的地址是否相同。而equals()默认使用Object类中的equals()方法，该方法是比较两个对象的地址是否相同，如果要实现对象内容比较，需要重写equals()方法</li><li>== 是一个操作符，可以应用于任何两个变量，而equals()是一个方法，需要被调用</li><li>==比equals效率更高，因为它不需要比较对象的内容，而只需要比较对象的地址</li></ul><p>综上，**== 比较的是两个对象的地址，而equals()比较的是两个对象的内容**。对于基本数据类型，== 比较的是它们的值是否相等。在使用时，需要根据具体的需求选择使用哪种比较方式。如果要比较两个对象的内容，应该使用equals()方法。如果要比较两个对象是否为同一个对象，则应该使用==操作符。</p><h3 id="Java的四种引用，强弱软虚"><a href="#Java的四种引用，强弱软虚" class="headerlink" title="Java的四种引用，强弱软虚"></a>Java的四种引用，强弱软虚</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>强引用是我们平常使用最多的引用，<strong>强引用在程序内存不足（OOM）的时候也不会被回收</strong>，使用方式：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>弱引用就是只要JVM垃圾回收器发现了它，就会将之回收，使用方式：</p><pre class=" language-java"><code class="language-java">WeakReference<span class="token operator">&lt;</span>String<span class="token operator">></span> wrf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>软引用在程序内存不足时，会被回收，使用方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注意：wrf这个引用也是强引用，它是指向SoftReference这个对象的，</span><span class="token comment" spellcheck="true">// 这里的软引用指的是指向new String("str")的引用，也就是SoftReference类中T</span>SoftReference<span class="token operator">&lt;</span>String<span class="token operator">></span> wrf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>虚引用的回收机制跟弱引用差不多，但是它被回收之前，会被放入 ReferenceQueue 中。注意</p><p>哦，其它引用是被JVM回收后才被传入 ReferenceQueue 中的。由于这个机制，所以虚引用大多</p><p>被用于引用销毁前的处理工作。还有就是，虚引用创建的时候，必须带有 ReferenceQueue ，</p><p>使用例子：</p><pre class=" language-java"><code class="language-java">PhantomReference<span class="token operator">&lt;</span>String<span class="token operator">></span> prf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h3><ul><li>浅拷贝:被复制对象的所有变量都含有与原来的对象相同的值,而所有的对其他对象的引用仍然指</li></ul><p>向原来的对象.换言之,<strong>浅拷贝仅仅复制所考虑的对象,而不复制它所引用的对象</strong>。</p><ul><li>深拷贝:被复制对象的所有变量都含有与原来的对象相同的值.而那些引用其他对象的变量将指向</li></ul><p>被复制过的新对象.而不再是原有的那些被引用的对象.换言之.<strong>深拷贝把要复制的对象所引用的</strong></p><p><strong>对象都复制了一遍</strong>。</p><h3 id="Java创建对象的方式"><a href="#Java创建对象的方式" class="headerlink" title="Java创建对象的方式"></a>Java创建对象的方式</h3><ul><li>new创建对象</li><li>通过反射机制</li><li>采用clone机制</li><li>通过序列化机制</li></ul><h3 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h3><ul><li>实现方式不同：接口定义了一组公共的方法，但没有提供实现。类实现接口时，必须实现接口中定义的所有方法。抽象类是一个具有一些抽象方法的类，它可以有一些具体方法的实现</li><li>继承限制不同：一个类只能继承一个类（包含抽象类），但一个类能实现多个接口</li><li>抽象类可以包含成员变量、构造方法、非抽象方法，而接口只能包含公共静态常量和公共抽象方法</li><li>接口中的方法默认是公共的、抽象的和不可变的，而抽象类可以定义任意类型的方法</li><li>接口可以在不影响类结构的情况下增加新方法，而抽象类的修改可能会影响已有子类的实现。</li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型，即“<strong>参数化类型</strong>”，顾名思义就是将类型由原来的具体的类型参数化</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>泛型的好处是在<strong>编译时检查类型安全</strong>，并且所有的强制转换都是自动和隐式的，提高代码的重用率</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射是在运行状态中，对于任意一个类，都能知道这个类的属性和方法，对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息、动态调用方法的功能叫做Java语言的反射机制</p><h4 id="哪里用到反射"><a href="#哪里用到反射" class="headerlink" title="哪里用到反射"></a>哪里用到反射</h4><p>像JDBC就是典型的反射</p><pre class=" language-java"><code class="language-java">Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">'com.mysql.jdbc.Driver.class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载MySQL的驱动类</span></code></pre><h4 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h4><ul><li>优点：<strong>可以动态执行，在运行期间根据业务功能动态执行方法、访问属性，最大限度发挥了Java的灵活性。</strong></li><li>缺点：对性能有影响</li></ul><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><ul><li>序列化：将对象转换为字节序列的过程</li><li>反序列化：将存储在磁盘或网络节点上的字节序列恢复为对象的过程</li></ul><h3 id="final、finally、finalize的区别"><a href="#final、finally、finalize的区别" class="headerlink" title="final、finally、finalize的区别"></a>final、finally、finalize的区别</h3><ul><li>final用于声明类、变量、方法，分别表示类不可以继承，方法不可以被重写，变量不可以被重写赋值</li><li>finally一般作用在try-catch代码块中，表示总是执行。在处理异常的时候，通常我们将一定要执行的代码方法放入finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li><li>finalize是一个方法，属于gect类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Java集合概述"><a href="#Java集合概述" class="headerlink" title="Java集合概述"></a>Java集合概述</h3><p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code>接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>。</p><h3 id="说说List、Set、Queue、Map四者的区别"><a href="#说说List、Set、Queue、Map四者的区别" class="headerlink" title="说说List、Set、Queue、Map四者的区别"></a>说说List、Set、Queue、Map四者的区别</h3><ul><li><code>List</code>(对付顺序的好帮手): 存储的元素是有序的、可重复的。</li><li><code>Set</code>(注重独一无二的性质): 存储的元素是无序的、不可重复的。</li><li><code>Queue</code>(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li><li><code>Map</code>(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，”x” 代表 key，”y” 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</li></ul><h3 id="集合框架底层数据结构总结"><a href="#集合框架底层数据结构总结" class="headerlink" title="集合框架底层数据结构总结"></a>集合框架底层数据结构总结</h3><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><ul><li><code>ArrayList</code>： <code>Object[]</code> 数组</li><li><code>Vector</code>：<code>Object[]</code> 数组</li><li><code>LinkedList</code>： 双向链表（JDK1.6 之前为循环链表，JDK1.7 取消了循环）</li></ul><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><ul><li><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素</li><li><code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现一样，不过还是有一点点区别的</li><li><code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)</li></ul><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h5><ul><li><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现二叉堆</li><li><code>ArrayQueue</code>: <code>Object[]</code> 数组 + 双指针</li></ul><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><ul><li><code>HashMap</code>： JDK1.8 之前 <code>HashMap</code> 由数组+链表组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间、</li><li><code>LinkedHashMap</code>： <code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，<strong>增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序</strong>。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li><li><code>Hashtable</code>： 数组+链表组成的，数组是 <code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的</li><li><code>TreeMap</code>： 红黑树（自平衡的排序二叉树）</li></ul><h4 id="如何选用集合"><a href="#如何选用集合" class="headerlink" title="如何选用集合"></a>如何选用集合</h4><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 <code>Map</code> 接口下的集合，需要排序时选择 <code>TreeMap</code>,不需要排序时就选择 <code>HashMap</code>,需要保证线程安全就选用 <code>ConcurrentHashMap</code>。</p><p>当我们只需要存放元素值时，就选择实现<code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code>，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code>，然后再根据实现这些接口的集合的特点来选用。</p><h4 id="为什么要使用集合"><a href="#为什么要使用集合" class="headerlink" title="为什么要使用集合"></a>为什么要使用集合</h4><p>集合提高了数据存储的灵活性，Java 集合不仅可以用来存储不同类型不同数量的对象，还可以保存具有映射关系的数据。</p><h3 id="Collection子接口之List"><a href="#Collection子接口之List" class="headerlink" title="Collection子接口之List"></a>Collection子接口之List</h3><h4 id="ArrayList、LinkedList和Vector的区别"><a href="#ArrayList、LinkedList和Vector的区别" class="headerlink" title="ArrayList、LinkedList和Vector的区别"></a>ArrayList、LinkedList和Vector的区别</h4><ul><li><p>同步性：Vector是同步的，而ArrayList和LinkedList是非同步的。因此，多个线程可以同时访问ArrayList和LinkedList，但是在访问Vector时需要进行同步。</p></li><li><p>性能：ArrayList在随机访问时性能更好，而LinkedList在插入和删除时性能更好。这是因为ArrayList使用数组实现，因此随机访问时的时间复杂度为O(1)，但在插入和删除时需要移动数组中的元素，时间复杂度为O(n)；而LinkedList使用链表实现，插入和删除时只需要修改节点的指针，时间复杂度为O(1)，但随机访问时需要遍历链表，时间复杂度为O(n)。</p></li><li><p>容量增长：当集合的大小超过其容量时，ArrayList会自动增加其容量的一半，而Vector会将容量翻倍。LinkedList没有固定的容量。</p></li><li><p>迭代器：ArrayList和Vector使用ListIterator迭代器，而LinkedList使用Iterator迭代器。</p></li></ul><p>综上所述，如果需要在单线程环境下进行随机访问操作，应该选择ArrayList；如果需要频繁插入和删除操作，应该选择LinkedList；如果需要在多线程环境下进行访问操作，应该选择Vector。</p><h4 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h4><p>ArrayList默认的分配大小为10的容量，超过10，容器会以1.5倍扩容</p><p><img src="https://docimg1.docs.qq.com/image/AgAABd5wzU2HID9cmExN4rO68Tb7DWcG.png?w=791&amp;h=285" alt="img"></p><p><img src="https://docimg2.docs.qq.com/image/AgAABd5wzU2Fouc2W65MdZgHdT3rGoRD.png?w=689&amp;h=61" alt="img"></p><p>ArrayList是Java中的一个动态数组类，其内部使用一个Object类型的数组来存储元素。当数组不够大来容纳更多的元素时，ArrayList会触发扩容机制，将原有的数组复制到一个更大的新数组中，然后将新元素添加到新数组的尾部。</p><p>具体的<strong>扩容机制</strong>如下：</p><ul><li><p>当ArrayList需要添加元素时，首先判断当前数组是否已满。如果数组未满，则直接将元素添加到数组尾部；如果数组已满，则触发扩容机制。</p></li><li><p>扩容机制会根据当前数组的大小和增量计算出新数组的大小，并创建一个新的更大的数组。</p></li><li><p>将原有数组中的元素复制到新数组中，同时将新元素添加到新数组的尾部。</p></li><li><p>将ArrayList的内部数组引用指向新数组，原有数组会被垃圾回收器回收。</p></li></ul><p>默认情况下，ArrayList的增量为原来大小的一半，即每次扩容会将数组大小增加50%。可以通过构造函数指定增量大小，或通过set方法设置ArrayList的capacity属性来控制扩容时的数组增量。</p><h3 id="Collection子接口之Set"><a href="#Collection子接口之Set" class="headerlink" title="Collection子接口之Set"></a>Collection子接口之Set</h3><h4 id="比较HashSet、LinkedHashSet、TreeSet三者的异同"><a href="#比较HashSet、LinkedHashSet、TreeSet三者的异同" class="headerlink" title="比较HashSet、LinkedHashSet、TreeSet三者的异同"></a>比较HashSet、LinkedHashSet、TreeSet三者的异同</h4><ul><li><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 都是 <code>Set</code> 接口的实现类，都能保证元素唯一，都不是线程安全的。</li><li>主要区别在于底层数据结构不同。<code>HashSet</code> 的底层数据结构是<strong>哈希表</strong>（基于 <code>HashMap</code> 实现）。<code>LinkedHashSet</code> 的底层数据结构是<strong>链表</strong>和<strong>哈希表</strong>，元素的插入和取出顺序满足 FIFO。<code>TreeSet</code> 底层数据结构是<strong>红黑树</strong>，元素是有序的，排序的方式有自然排序和定制排序。</li></ul><h3 id="Collection-子接口之-Queue"><a href="#Collection-子接口之-Queue" class="headerlink" title="Collection 子接口之 Queue"></a>Collection 子接口之 Queue</h3><h3 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h3><h4 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h4><ul><li><p><strong>线程是否安全：</strong><code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的,因为 <code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code> 修饰。（如果你要保证线程安全的话就使用 <code>ConcurrentHashMap</code> 吧！）；</p></li><li><p><strong>效率：</strong> 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。另外，<code>Hashtable</code> 基本被淘汰，不要在代码中使用它；</p></li><li><p><strong>对 Null key 和 Null value 的支持：</strong><code>HashMap</code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</p></li><li><p><strong>初始容量大小和每次扩充容量大小的不同 ：</strong></p><ul><li><p>① 创建时如果不指定容量初始值，<code>Hashtable</code> 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。<code>HashMap</code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。</p></li><li><p>② 创建时如果给定了容量初始值，那么 <code>Hashtable</code> 会直接使用你给定的大小，而 <code>HashMap</code> 会将其扩充为 2 的幂次方大小。</p></li></ul></li><li><p><strong>底层数据结构：</strong> JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间。<code>Hashtable</code> 没有这样的机制。</p></li></ul><h4 id="HashMap和HashSet的区别"><a href="#HashMap和HashSet的区别" class="headerlink" title="HashMap和HashSet的区别"></a>HashMap和HashSet的区别</h4><p><code>HashSet</code> 底层就是基于 <code>HashMap</code> 实现的。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202303022202724.png" alt="image-20230302220228672"></p><h4 id="HashMap和TreeMap的区别"><a href="#HashMap和TreeMap的区别" class="headerlink" title="HashMap和TreeMap的区别"></a>HashMap和TreeMap的区别</h4><p><code>TreeMap</code> 和<code>HashMap</code> 都继承自<code>AbstractMap</code> ，但是需要注意的是<code>TreeMap</code>它还实现了<code>NavigableMap</code>接口和<code>SortedMap</code> 接口。</p><p>实现 <code>NavigableMap</code> 接口让 <code>TreeMap</code> 有了对集合内元素的搜索的能力。</p><p>实现<code>SortedMap</code>接口让 <code>TreeMap</code> 有了对集合中的元素根据键排序的能力。</p><p><strong>综上，相比于<code>HashMap</code>来说 <code>TreeMap</code> 主要多了对集合中的元素根据键排序的能力以及对集合内元素的搜索的能力。</strong></p><h4 id="HashSet如何检查重复"><a href="#HashSet如何检查重复" class="headerlink" title="HashSet如何检查重复"></a>HashSet如何检查重复</h4><p>在 JDK1.8 中，实际上无论<code>HashSet</code>中是否已经存在了某元素，<code>HashSet</code>都会直接插入，只是会在<code>add()</code>方法的返回值处告诉我们插入前是否存在相同元素。</p><h4 id="HashMap的底层实现"><a href="#HashMap的底层实现" class="headerlink" title="HashMap的底层实现"></a>HashMap的底层实现</h4><h5 id="JDK7"><a href="#JDK7" class="headerlink" title="JDK7"></a>JDK7</h5><p>HashMap由数组+链表，使用头插法。使用头插法是为了提高插入效率，但容易出现循环链表</p><p>默认容量是16，负载因子是0.75，一旦大于0.75*16，就会调用resize()进行扩容，将该链表扩大两倍，创建一个新的两倍长的链表</p><h5 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h5><p>HashMap有数组+链表+红黑树，使用尾插法。相对于头插法，尾插法消耗小，避免循环链表</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li><p>数据结构：HashMap底层使用一个数组和链表或红黑树结构实现。数组用来存储元素，链表或红黑树用来解决哈希冲突。</p></li><li><p>哈希算法：在向HashMap中插入元素时，会先根据元素的键（Key）计算哈希值（Hash Value），通过哈希值得到数组下标，然后将元素插入到对应的数组位置。Java中默认使用的哈希算法是通过key的hashCode()方法计算哈希值，并对数组长度取模得到下标。</p></li><li><p>解决哈希冲突：由于哈希算法的限制，可能会出现不同元素的哈希值相同的情况，这就是哈希冲突。HashMap使用链表或红黑树来解决哈希冲突。当链表长度大于等于8时，链表会自动转化为红黑树，以提高查询效率。</p></li><li><p>初始容量和负载因子：在初始化HashMap时，可以指定初始容量和负载因子。初始容量指定了HashMap底层数组的长度，负载因子指定了HashMap何时需要扩容。当HashMap中元素的数量超过了容量和负载因子的乘积时，HashMap会自动进行扩容操作，即创建一个新的数组，将原数组中的元素重新哈希到新数组中，以此来提高HashMap的性能。</p></li><li><p>线程安全：HashMap不是线程安全的，如果多个线程同时对一个HashMap进行操作，可能会导致数据出现问题。可以使用ConcurrentHashMap来代替HashMap，它是线程安全的。</p></li></ul><h4 id="HashMap的初始容量设置多少合适"><a href="#HashMap的初始容量设置多少合适" class="headerlink" title="HashMap的初始容量设置多少合适"></a>HashMap的初始容量设置多少合适</h4><p>计算公式：**(需要的容量/负载因子) + 1**</p><p>eg.假如有6个元素，则HashMap的初始化容量为 (6/0.75) +1 = 9，即<code>new HashMap(9)</code></p><h4 id="ConcurrentHashMap和Hashtable的区别"><a href="#ConcurrentHashMap和Hashtable的区别" class="headerlink" title="ConcurrentHashMap和Hashtable的区别"></a>ConcurrentHashMap和Hashtable的区别</h4><ul><li><p><strong>底层数据结构：</strong> JDK1.7 的 <code>ConcurrentHashMap</code> 底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟 <code>HashMap1.8</code> 的结构一样，数组+链表/红黑二叉树。<code>Hashtable</code> 和 JDK1.8 之前的 <code>HashMap</code> 的底层数据结构类似都是采用 <strong>数组+链表</strong> 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</p></li><li><p><strong>实现线程安全的方式（重要）：</strong></p></li><li><ul><li>在 JDK1.7 的时候，<code>ConcurrentHashMap</code> 对整个桶数组进行了分割分段(<code>Segment</code>，分段锁)，每一把锁只锁容器其中一部分数据（下面有示意图），多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。</li></ul></li></ul><ul><li><ul><li>到了 JDK1.8 的时候，<code>ConcurrentHashMap</code> 已经摒弃了 <code>Segment</code> 的概念，而是直接用 <code>Node</code> 数组+链表+红黑树的数据结构来实现，并发控制使用 <code>synchronized</code> 和 CAS 来操作。（JDK1.6 以后 <code>synchronized</code> 锁做了很多优化） 整个看起来就像是优化过且线程安全的 <code>HashMap</code>，虽然在 JDK1.8 中还能看到 <code>Segment</code> 的数据结构，但是已经简化了属性，只是为了兼容旧版本；</li></ul></li><li><strong><code>Hashtable</code>(同一把锁)</strong> :使用 <code>synchronized</code> 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。</li></ul><h4 id="JDK1-7和JDK1-8的ConcurrentHashMap实现有什么不同"><a href="#JDK1-7和JDK1-8的ConcurrentHashMap实现有什么不同" class="headerlink" title="JDK1.7和JDK1.8的ConcurrentHashMap实现有什么不同"></a>JDK1.7和JDK1.8的ConcurrentHashMap实现有什么不同</h4><ul><li><strong>线程安全实现方式</strong> ：JDK 1.7 采用 <code>Segment</code> 分段锁来保证安全， <code>Segment</code> 是继承自 <code>ReentrantLock</code>。JDK1.8 放弃了 <code>Segment</code> 分段锁的设计，采用 <code>Node + CAS + synchronized</code> 保证线程安全，锁粒度更细，<code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点。</li><li><strong>Hash 碰撞解决方法</strong> : JDK 1.7 采用拉链法，JDK1.8 采用拉链法结合红黑树（链表长度超过一定阈值时，将链表转换为红黑树）。</li><li><strong>并发度</strong> ：JDK 1.7 最大并发度是 Segment 的个数，默认是 16。JDK 1.8 最大并发度是 Node 数组的大小，并发度更大。</li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230307154211319.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230307154231120.png"></p><ul><li>悲观锁<ul><li>悲观锁<strong>认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁</strong>，确保数据不会被别的线程修改。</li><li>Java中，synchronized关键字和Lock的实现类都是悲观锁。</li></ul></li><li>乐观锁<ul><li>乐观锁<strong>认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁</strong>，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。</li><li>如果这个数据没有被更新，当前线程将自己修改的数据成功写入。</li><li>如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</li><li>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</li></ul></li></ul><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>悲观锁适合写操作多的场景</strong>，先加锁可以保证写操作时数据正确</li><li><strong>乐观锁适合读操作多的场景</strong>，不加锁的特点能够使其读操作的性能大幅提升</li></ul><h3 id="自旋锁与适应性自旋锁"><a href="#自旋锁与适应性自旋锁" class="headerlink" title="自旋锁与适应性自旋锁"></a>自旋锁与适应性自旋锁</h3><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul><li>进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</li><li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</li></ul><h3 id="线程有哪些状态"><a href="#线程有哪些状态" class="headerlink" title="线程有哪些状态"></a>线程有哪些状态</h3><ul><li>创建</li><li>就绪</li><li>运行</li><li>堵塞</li><li>死亡</li></ul><h3 id="线程安全与非线程安全"><a href="#线程安全与非线程安全" class="headerlink" title="线程安全与非线程安全"></a>线程安全与非线程安全</h3><p>线程安全和非线程安全是指在多线程并发执行是，程序的行为是否符合预期</p><ul><li><p>线程安全的程序在多线程并发执行时，可以保证每个线程的操作不会影响其他线程的结果，程序仍然可以正确地运行。线程安全的程序需要考虑线程间的同步和互斥，常用的方法有锁、信号量等。线程安全的程序通常会有更高的性能开销，因为线程间的同步需要消耗额外的时间和资源。Vector、StringBuffer、Hashtable是线程安全的</p></li><li><p>非线程安全的程序在多线程并发执行时，可能会导致不可预期的结果，例如数据竞争、死锁等。非线程安全的程序在多线程环境下使用时，需要开发者自己考虑线程安全的问题。非线程安全的程序通常会有更高的性能，因为不需要额外的同步和互斥开销。ArrayList、LinkedList、HashSet、LinkedSet、TreeSet、HashMap、TreeMap、StringBuilder都是非线程安全的</p></li></ul><h4 id="如何防止死锁"><a href="#如何防止死锁" class="headerlink" title="如何防止死锁"></a>如何防止死锁</h4><ul><li>避免使用多个锁：减少使用多个锁可以减少死锁的可能性。如果必须使用多个锁，则应该始终以相同的顺序获取锁，以避免死锁。</li><li>使用超时机制：当一个进程等待太久时，可以设置一个超时机制，如果等待时间超过某个阈值，就会放弃等待并释放已获得的资源。</li><li>避免循环等待：进程之间应该避免循环等待资源。如果需要多个资源，应该按照相同的顺序请求这些资源。</li><li>预防性措施：在程序设计时，应该预先避免潜在的死锁情况。例如，使用单一的资源管理器，为每个资源分配唯一的标识符，等等。</li><li>死锁检测：使用死锁检测算法可以检测到死锁并采取相应的措施，如回滚事务或强制释放资源。</li></ul><h3 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h3><ul><li><p>继承Thread类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread run ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>实现Runnable接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"thread run ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>实现Callable接口</p><ul><li>定义一个Callable的实现类并实现call方法。call方法是带返回值的</li><li>通过FutureTask的构造方法，把这个Callable实现类传进去</li><li>把FutureTask作为Thread类的target，创建Thread线程对象</li><li>通过FutureTask的get方法获取线程的执行结果</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>线程池方式创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"thread run ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="Runnable、Callable的区别"><a href="#Runnable、Callable的区别" class="headerlink" title="Runnable、Callable的区别"></a>Runnable、Callable的区别</h3><ul><li>Runnable中的run()方法的返回值是void</li><li>Callable中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</li></ul><h3 id="Runnable、Callable接口实现的优缺点"><a href="#Runnable、Callable接口实现的优缺点" class="headerlink" title="Runnable、Callable接口实现的优缺点"></a>Runnable、Callable接口实现的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>线程类只是实现了Runnable或者Callable接口，还可以继承其他类。这种方式下，多个线程可以共享一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好的体现了面向对象的思想。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>编程稍微复杂一些，如果需要访问当前线程，则必须使用 Thread.currentThread() 方法</p><h3 id="Thread类的方式创建线程的优缺点"><a href="#Thread类的方式创建线程的优缺点" class="headerlink" title="Thread类的方式创建线程的优缺点"></a>Thread类的方式创建线程的优缺点</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用this即可获取当前线程</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>因为线程类已经继承了Thread类，Java语言是单继承的，所以就不能再继承其他父类了。</p><h3 id="notify-和notifyAll-的区别"><a href="#notify-和notifyAll-的区别" class="headerlink" title="notify()和notifyAll()的区别"></a>notify()和notifyAll()的区别</h3><ul><li>notify可能导致死锁，而notifyAll()不会</li><li>notifyAll是唤醒所有，notify是唤醒一个</li><li></li></ul><h3 id="sleep-和wait-的区别"><a href="#sleep-和wait-的区别" class="headerlink" title="sleep()和wait()的区别"></a>sleep()和wait()的区别</h3><ul><li>sleep()方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。线程不会释放对象锁</li><li>wait()方法是Object类的方法。当一个线程执行到wait方法时，它就进入到该对象的等待池中。线程会放弃对象锁，可以通过notify()和notifyAll()来唤醒，被唤醒的线程会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。</li></ul><h3 id="Thread类中start-和run-的区别"><a href="#Thread类中start-和run-的区别" class="headerlink" title="Thread类中start()和run()的区别"></a>Thread类中start()和run()的区别</h3><p>start()方法被用来启动新创建的线程，而且start()内部调用了run()方法，这和直接调用run()方法的效果不一样。当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启动，start()方法才会启动新线程。</p><ul><li>start 是让线程进入就绪状态；run是让线程运行起来</li></ul><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h4><p><strong>线程池就是管理一系列线程的资源池</strong>。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被消耗，而是等待下一个任务。</p><h4 id="为什么要用线程池"><a href="#为什么要用线程池" class="headerlink" title="为什么要用线程池"></a>为什么要用线程池</h4><ul><li><strong>降低资源消耗。</strong>通过重复利用已创建的线程降低线程创建和消耗的消耗。</li><li><strong>提高响应速度。</strong>当任务到达时，任务可以不需要等待线程创建就能立即执行。</li><li><strong>提高线程的可管理性。</strong>线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h4 id="如何创建线程池"><a href="#如何创建线程池" class="headerlink" title="如何创建线程池"></a>如何创建线程池</h4><h5 id="通过ThreadPoolExecutor构造函数来创建（推荐）"><a href="#通过ThreadPoolExecutor构造函数来创建（推荐）" class="headerlink" title="通过ThreadPoolExecutor构造函数来创建（推荐）"></a>通过<code>ThreadPoolExecutor</code>构造函数来创建（推荐）</h5><h5 id="通过Executor框架的工具类Executors来创建"><a href="#通过Executor框架的工具类Executors来创建" class="headerlink" title="通过Executor框架的工具类Executors来创建"></a>通过<code>Executor</code>框架的工具类<code>Executors</code>来创建</h5><p>我们可以创建多种类型的<code>ThreadPoolExecutor</code></p><ul><li><strong><code>FixedThreadPool</code></strong> ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li><li><strong><code>SingleThreadExecutor</code>：</strong> 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li><li><strong><code>CachedThreadPool</code>：</strong> 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。</li><li><strong><code>ScheduledThreadPool</code></strong> ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。</li></ul><h4 id="为什么不推荐使用内置线程池"><a href="#为什么不推荐使用内置线程池" class="headerlink" title="为什么不推荐使用内置线程池"></a>为什么不推荐使用内置线程池</h4><p>在《阿里巴巴Java开发手册》中明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程</p><p><strong>为什么呢？</strong></p><blockquote><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p></blockquote><p>另外，《阿里巴巴 Java 开发手册》中<strong>强制线程池不允许使用 <code>Executors</code> 去创建</strong>，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险</p><ul><li><strong><code>FixedThreadPool</code> 和 <code>SingleThreadExecutor</code></strong> ： 使用的是无界的 <code>LinkedBlockingQueue</code>，任务队列最大长度为 <code>Integer.MAX_VALUE</code>,可能堆积大量的请求，从而导致 OOM。</li><li><strong><code>CachedThreadPool</code></strong> ：使用的是同步队列 <code>SynchronousQueue</code>, 允许创建的线程数量为 <code>Integer.MAX_VALUE</code> ，可能会创建大量线程，从而导致 OOM。</li><li><strong><code>ScheduledThreadPool</code> 和 <code>SingleThreadScheduledExecutor</code></strong> : 使用的无界的延迟阻塞队列<code>DelayedWorkQueue</code>，任务队列最大长度为 <code>Integer.MAX_VALUE</code>,可能堆积大量的请求，从而导致 OOM。</li></ul><h4 id="ThreadPoolExecutor和ThreadPoolTaskExecutor的区别"><a href="#ThreadPoolExecutor和ThreadPoolTaskExecutor的区别" class="headerlink" title="ThreadPoolExecutor和ThreadPoolTaskExecutor的区别"></a><code>ThreadPoolExecutor</code>和<code>ThreadPoolTaskExecutor</code>的区别</h4><ul><li><code>ThreadPoolExecutor</code>是JDK的一个线程池实现，而<code>ThreadPoolTaskExecutor</code>是Spring框架中的一个线程池实现，继承自<code>ThreadPoolExecutor</code>，并添加了一些扩展功能</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM是什么"><a href="#JVM是什么" class="headerlink" title="JVM是什么"></a>JVM是什么</h3><p>JVM（Java Virtual Machine），Java虚拟机，是JRE的一部分。JVM有自己完善的硬件架构，还具备相应的指令系统，是实现跨平台的关键</p><h3 id="Java内存区域（运行时数据区）"><a href="#Java内存区域（运行时数据区）" class="headerlink" title="Java内存区域（运行时数据区）"></a>Java内存区域（运行时数据区）</h3><ul><li>堆（Heap）</li><li>方法区（Method Area）</li><li>本地方法栈（Native Method Stack）</li><li>虚拟机栈（VM Stack）</li><li>程序计数器（Program Counter Register）</li></ul><h4 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h4><ul><li>虚拟机栈</li><li>本地方法栈</li><li>程序计数器</li></ul><h4 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h4><ul><li>堆</li><li>方法区</li><li>直接内存</li></ul><h3 id="StackOverFlowError"><a href="#StackOverFlowError" class="headerlink" title="StackOverFlowError"></a>StackOverFlowError</h3><p>若栈的内存大小<strong>不允许</strong>动态扩展，那么线程请求栈的深度超过Java虚拟机栈的最大深度时，就会抛出StackOverFlowError</p><h4 id="导致原因"><a href="#导致原因" class="headerlink" title="导致原因"></a>导致原因</h4><ul><li>无限递归、死循环</li><li>执行大量方法导致线程栈空间耗尽</li><li>方法声明海量的局部变量</li></ul><h3 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h3><p>简称OOM。如果栈内存允许动态扩展，如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则会抛出OutOfMemory异常</p><h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><ul><li>Java堆溢出</li></ul><p>Java堆用于存储对象实例，只要不断创建对象，并保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量到达最大堆的容量限制后就会产生内存溢出异常</p><ul><li>虚拟机栈、本地方法栈溢出</li></ul><p>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</p><p>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p><ul><li>方法区和运行时常量池溢出</li><li>本地直接内存溢出</li></ul><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><ul><li>栈（stack）：内存空间小，存取效率高；常用于保存局部变量、方法帧、基本数据类型</li><li>堆（Heap）：内存空间大，存取效率低；所有对象实例、数组都存在堆上</li></ul><h3 id="GC是什么？为什么要有GC？"><a href="#GC是什么？为什么要有GC？" class="headerlink" title="GC是什么？为什么要有GC？"></a>GC是什么？为什么要有GC？</h3><p>GC是垃圾收集的意思。<strong>内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至奔溃</strong>，<strong>Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的。</strong></p><h3 id="垃圾回收的优点"><a href="#垃圾回收的优点" class="headerlink" title="垃圾回收的优点"></a>垃圾回收的优点</h3><ul><li>Java引入垃圾回收机制，使开发时不需要考虑内存管理</li><li>垃圾回收可以有效防止内存泄漏</li></ul><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p>Java的类加载机制是Java虚拟机<strong>（JVM）在运行时动态加载类的过程</strong>。</p><ul><li><strong>加载</strong>: 查找并加载类的二进制数据</li><li><strong>连接</strong> <ul><li><strong>验证</strong>: 确保被加载的类的正确性</li><li><strong>准备</strong>: 为类的静态变量分配内存，并将其初始化为默认值</li><li><strong>解析</strong>: 把类中的符号引用转换为直接引用</li></ul></li><li><strong>初始化</strong>：为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。</li><li><strong>使用</strong>： 类访问方法区内的数据结构的接口， 对象是Heap区的数据</li><li><strong>卸载</strong>： 结束生命周期</li></ul><h4 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h4><blockquote><p>双亲委派机制是Java中的一种类加载机制，它是基于父子关系的，当一个类需要被加载时，首先会委派其父类加载器去加载该类，如果父类加载器无法加载该类，再由当前类加载器去加载。这样可以保证类的唯一性和安全性，避免重复加载和类的混乱。</p></blockquote><h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><ul><li>当一个类需要被加载时，首先会委派其父类加载器去加载该类。</li><li>如果父类加载器无法加载该类，再由当前类加载器去加载。</li><li>如果当前类加载器也无法加载该类，再委派其父类加载器的父类加载器去加载，直到顶层的启动类加载器。</li><li>如果顶层的启动类加载器也无法加载该类，就会抛出ClassNotFoundException异常。</li></ul><h2 id="JDK新特性"><a href="#JDK新特性" class="headerlink" title="JDK新特性"></a>JDK新特性</h2><h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h3><h4 id="1、OSI七层模型是什么？每一层的作用是什么？"><a href="#1、OSI七层模型是什么？每一层的作用是什么？" class="headerlink" title="1、OSI七层模型是什么？每一层的作用是什么？"></a>1、OSI七层模型是什么？每一层的作用是什么？</h4><h3 id="TCP-x2F-IP模型"><a href="#TCP-x2F-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3><h4 id="ICP-x2F-IP四层模型是什么？每一层的作用是什么？"><a href="#ICP-x2F-IP四层模型是什么？每一层的作用是什么？" class="headerlink" title="ICP/IP四层模型是什么？每一层的作用是什么？"></a>ICP/IP四层模型是什么？每一层的作用是什么？</h4><h3 id="为什么网络需要分层？"><a href="#为什么网络需要分层？" class="headerlink" title="为什么网络需要分层？"></a>为什么网络需要分层？</h3><h1 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h1><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis的数据结构"><a href="#Redis的数据结构" class="headerlink" title="Redis的数据结构"></a>Redis的数据结构</h3><h3 id="Redis的线程模型"><a href="#Redis的线程模型" class="headerlink" title="Redis的线程模型"></a>Redis的线程模型</h3><h3 id="Redis的内存管理"><a href="#Redis的内存管理" class="headerlink" title="Redis的内存管理"></a>Redis的内存管理</h3><h3 id="Redis的持久化机制"><a href="#Redis的持久化机制" class="headerlink" title="Redis的持久化机制"></a>Redis的持久化机制</h3><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>在指定时间间隔内将内存中的数据集快照（snapshot）到磁盘上，生成一个 RDB 文件。RDB 文件是一个经过压缩的二进制文件，包含了 Redis 在某个时间点上的数据集，可以用于数据备份和恢复。RDB 文件可以手动触发生成，也可以设置自动保存的时间间隔。使用 RDB 持久化机制，可以最大限度地保证数据的完整性和一致性，但会有一定的数据丢失风险，因为在数据快照之后发生的任何变化都不会被保存。</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>将 Redis 服务器执行的所有写命令追加到 AOF 文件的末尾，通过这种方式来记录 Redis 的所有写操作，这样在 Redis 重启的时候，可以通过重新执行 AOF 文件中的命令来重建数据库的原始状态。<strong>AOF 文件是一个文本文件</strong>，包含了 Redis 的所有写操作，可以通过配置文件设置 AOF 文件的同步方式和频率，以达到最大程度的数据保护。使用 AOF 持久化机制，可以最大限度地保证数据的安全性和可靠性，但会有一定的性能损失。</p><h3 id="Redis的淘汰机制"><a href="#Redis的淘汰机制" class="headerlink" title="Redis的淘汰机制"></a>Redis的淘汰机制</h3><p>Redis 的内存是有限的，当内存不足时，Redis 会根据一定的淘汰策略来决定哪些数据需要被淘汰掉。Redis 目前支持 6 种淘汰策略：</p><ol><li>noeviction：不淘汰数据，当内存不足时，返回错误信息。</li><li>volatile-lru：从已设置过期时间的数据集中选择最近最少使用的数据淘汰。</li><li>volatile-ttl：从已设置过期时间的数据集中选择将要过期的数据淘汰。</li><li>volatile-random：从已设置过期时间的数据集中随机选择数据淘汰。</li><li>allkeys-lru：从所有数据集中选择最近最少使用的数据淘汰。</li><li>allkeys-random：从所有数据集中随机选择数据淘汰。</li></ol><p>其中，noeviction 策略表示不淘汰数据，当内存不足时，返回错误信息；volatile-* 策略表示只淘汰已设置过期时间的数据；allkeys-* 策略表示从所有数据集中选择数据淘汰。在实际使用中，可以根据业务需求和数据特征来选择最合适的淘汰策略。</p><p>此外，Redis 还提供了一种被动淘汰机制，即在 Redis 内存使用达到指定阈值时，Redis 会触发被动淘汰机制，根据已经设置的淘汰策略来淘汰一些数据，以释放内存空间。这种被动淘汰机制可以通过配置文件中的 <code>maxmemory-policy</code> 参数来设置。例如，当设置为 <code>volatile-lru</code> 时，Redis 会在内存使用达到 <code>maxmemory</code> 时，自动淘汰已设置过期时间的数据集中最近最少使用的数据，以释放内存空间。</p><p>需要注意的是，淘汰机制可能会导致数据丢失，因此在生产环境中，需要根据业务需求和数据的重要性来选择最合适的淘汰策略，并进行数据备份和监控。</p><h3 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h3><h3 id="Redis的性能优化"><a href="#Redis的性能优化" class="headerlink" title="Redis的性能优化"></a>Redis的性能优化</h3><h3 id="Redis的生产问题"><a href="#Redis的生产问题" class="headerlink" title="Redis的生产问题"></a>Redis的生产问题</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>大量请求的key是不合理的，根本不存在于缓存中，也不存在与数据库中。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>缓存无效key并设置过期时间</li><li>布隆过滤器：布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不存在，那么元素一定不存在</li></ul><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存击穿，请求的key是对应的热点数据，该数据存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><h5 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>设置热点数据永不过期或者过期时间比较长</li><li>针对热点数据提前预热，将其存入缓存中并设置合理的过期时间</li><li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库，减少数据库压力</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p><strong>缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。</strong> 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。</p><h5 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li><strong>针对 Redis 服务不可用的情况</strong><ul><li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li><li>限流，避免同时处理大量的请求。</li></ul></li><li><strong>针对热点缓存失效的情况</strong><ul><li>设置不同的失效时间比如随机设置缓存的失效时间。</li><li>缓存永不失效（不太推荐，实用性太差）。</li><li>设置二级缓存。</li></ul></li></ul><h3 id="Redis的四种模式"><a href="#Redis的四种模式" class="headerlink" title="Redis的四种模式"></a>Redis的四种模式</h3><h4 id="Redis的单机模式"><a href="#Redis的单机模式" class="headerlink" title="Redis的单机模式"></a>Redis的单机模式</h4><p>单机模式就是安装一个Redis，启动起来，业务调用即可。</p><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ul><li>部署简单，成本低（没有备用节点，不需要其他开支）</li><li>高性能，单机不需要同步数据</li></ul><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>可靠性不能保障，单节点有宕机的风险</li><li>单机高性能受限于CPU的处理能力，redis是单线程的</li><li>如果需要很高的性能、可靠性，单机就不合适</li></ul><h4 id="Redis的主从模式"><a href="#Redis的主从模式" class="headerlink" title="Redis的主从模式"></a>Redis的主从模式</h4><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230301143030995.png" alt="image-20230301143030995"></p><p>主从模式就是N个redis实例，可以是<strong>1主N从</strong>，也可以N主N从（N主N从则不是严格意义上的主从模式了，后续的集群模式会说到，N主N从就是N+N个redis实例。）</p><p>主从模式的一个作用是<strong>备份数据</strong>，这样当一个节点损坏（指不可恢复的硬件损坏）时，数据因为有备份，可以方便恢复。另一个作用是负载均衡，所有客户端都访问一个节点肯定会影响Redis工作效率，有了主从以后，查询操作就可以通过查询从节点来完成。</p><p>既然主从复制，意味着master和slave的数据都是一样的，有数据冗余问题。在程序设计上，为了高可用性和高性能，是允许有冗余存在的。对于追求极致用户体验的产品，是绝对不允许有宕机存在的。</p><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ul><li>一旦主节点宕机，从节点作为主节点的备份可以随时顶上来</li><li>扩展主节点的读能力，分担主节点读压力</li><li>主从复制还是哨兵模式和集群模式能够实施的基础</li></ul><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li>一旦主节点宕机，从节点晋升成主节点，同时需要修改应用方的主节点地址</li><li>主节点的写能力受到单机的限制</li><li>主节点的存储能力受到单机的限制</li><li>数据冗余的问题</li></ul><h4 id="Redis的哨兵模式"><a href="#Redis的哨兵模式" class="headerlink" title="Redis的哨兵模式"></a>Redis的哨兵模式</h4><p>主从模式，当主节点宕机之后，从节点是可以作为主节点顶上来，继续提供服务的。但是有一个问题，<strong>主节点的IP已经变动了，此时应用服务还是拿着原主节点的地址去访问，此时就需要人工干预进行修改</strong>。哨兵恰恰就可以解决这个问题……</p><p>访问redis集群的数据都是通过哨兵集群的，<strong>哨兵监控整个redis集群</strong>。一旦发现redis集群出现了问题，比如主节点挂了，从节点会顶上来。但是主节点地址变了，这时候应用服务无感知，也不用更改访问地址，因为哨兵才是和应用服务做交互的。Sentinel 很好的解决了故障转移，在高可用方面又上升了一个台阶，当然Sentinel还有其他功能。比如 主节点存活检测、主从运行情况检测、主从切换。Redis的Sentinel最小配置是 一主一从。</p><p>Redis哨兵机制是Redis的一种高可用性解决方案，可以从主从复制架构中，实现自动故障检测和故障转移。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230301145829496.png" alt="image-20230301145829496"></p><h5 id="哨兵（sentinel）实现了什么功能"><a href="#哨兵（sentinel）实现了什么功能" class="headerlink" title="哨兵（sentinel）实现了什么功能"></a>哨兵（sentinel）实现了什么功能</h5><ul><li><strong>监控</strong>：哨兵会不断地检查主节点和从节点是否运作正常</li><li><strong>自动故障转移</strong>：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他节点改为复制新的主节点</li><li><strong>配置提供者</strong>：客户端初始化时，通过连接哨兵来获得当前Redis服务的主节点地址</li><li><strong>通知</strong>：哨兵可以将故障转移的结果发送给客户端</li></ul><h5 id="Redis哨兵集群是通过什么方式组建的"><a href="#Redis哨兵集群是通过什么方式组建的" class="headerlink" title="Redis哨兵集群是通过什么方式组建的"></a>Redis哨兵集群是通过什么方式组建的</h5><p>哨兵实例之间的相互发现，要归功于Redis提供的<strong>pub/sub机制（发布/订阅机制）</strong>。</p><p>在主从集群中，主库上有一个名为<code>__sentinel__:hello</code>的频道，不同的哨兵就是通过它来相互发现并实现通信的。如下图，哨兵1把自己的IP和端口发布在<code>__sentinel__:hello</code>频道上，哨兵2和3订阅了该频道。那此时，哨兵2和3就可以从这个频道直接获取哨兵1的ip地址和端口号。然后，哨兵2、3可以与哨兵1建立网络连接。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230301150546228.png" alt="image-20230301150546228"></p><h5 id="Redis哨兵是如何监控Redis集群的"><a href="#Redis哨兵是如何监控Redis集群的" class="headerlink" title="Redis哨兵是如何监控Redis集群的"></a>Redis哨兵是如何监控Redis集群的</h5><p>这是由<strong>哨兵向主库发送 INFO 命令来完成的</strong>。就像下图所示，哨兵 2 给主库发送 INFO 命令，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。哨兵 1 和 3 可以通过相同的方法和从库建立连接。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230301150755136.png" alt="image-20230301150755136"></p><h5 id="哨兵如何判断主库已经下线"><a href="#哨兵如何判断主库已经下线" class="headerlink" title="哨兵如何判断主库已经下线"></a>哨兵如何判断主库已经下线</h5><p>主要分为<strong>主观下线</strong>和<strong>客观下线</strong></p><ul><li>主观下线：任何一个哨兵都是可以监控探测，并做出Redis节点下线的判断</li><li>客观下线：由哨兵集群共同决定Redis节点是否下线</li></ul><p>当某个哨兵判断主库“主观下线”后，就会给其他哨兵发送<code>is-master-down-by-addr</code>命令。接着，其他哨兵会根据自己和主库的连接情况，做出Y或N的响应，Y相当于赞成票，N相当于反对票。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230301152348469.png" alt="image-20230301152348469"></p><p>如果赞成票数（这里是2）是大于等于哨兵配置文件中的 <code>quorum</code> 配置项（比如这里如果是quorum=2）, 则可以判定<strong>主库客观下线</strong>了。</p><h5 id="Redis哨兵的选举机制是什么样的"><a href="#Redis哨兵的选举机制是什么样的" class="headerlink" title="Redis哨兵的选举机制是什么样的"></a>Redis哨兵的选举机制是什么样的</h5><ul><li>为什么必然会出现选举/共识机制？</li></ul><p>为了避免哨兵的单点情况发生，所以需要一个哨兵的分布式集群。作为分布式集群，必然涉及共识（即选举问题）；同时故障的转移和通知都只需要一个主的哨兵节点就可以了</p><ul><li>哨兵的选举机制是什么样的？</li></ul><p>Raft选举算法：<strong>选举的票数大于等于num(sentinels)/2+1时，将成为领导者</strong>，如果没有超过，继续选举</p><p><strong>任何一个想成为Leader的哨兵，要满足两个条件</strong>：</p><ul><li>第一，拿到半数以上的赞成票；</li><li>第二，拿到的票数同时还需要大于等于哨兵配置文件中的quorum值</li></ul><p>以 3 个哨兵为例，假设此时的 quorum 设置为 2，那么，任何一个想成为 Leader 的哨兵只要拿到 2 张赞成票，就可以了。</p><p><strong>主库判定客观下线了，那么如何从剩余的从库中选择一个新的主库呢？</strong></p><ul><li>过滤掉不健康的（下线或断线），没有回复过哨兵ping响应的从节点</li><li>选择salve-priority从节点优先级最高的</li><li>选择复制偏移量最大的，只复制最完整的从节点</li></ul><h4 id="Redis的集群模式"><a href="#Redis的集群模式" class="headerlink" title="Redis的集群模式"></a>Redis的集群模式</h4><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h1 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="Spring-1"><a href="#Spring-1" class="headerlink" title="Spring"></a>Spring</h3><h4 id="什么是Spring？"><a href="#什么是Spring？" class="headerlink" title="什么是Spring？"></a>什么是Spring？</h4><p>Spring是一种轻量级应用框架，旨在提高开发人员的开发效率以及系统的可维护性。</p><h4 id="列举一些重要的Spring模块"><a href="#列举一些重要的Spring模块" class="headerlink" title="列举一些重要的Spring模块"></a>列举一些重要的Spring模块</h4><ul><li>Spring Core：基础，可以说Spring其他所有的功能都依赖该类库，主要提供IOC和DI功能</li><li>Spring Aspects：该模块为与AspectsJ的集成提供支持</li><li>Spring AOP：提供面向切面的编程实现</li><li>Spring JDBC：Java数据库连接</li><li>Spring JMS：Java消息服务</li><li>Spring ORM：用于支持Hibernate等ORM工具</li><li>Spring Web：为创建Web应用程序提供支持</li><li>Spring Test：提供了对JUnit和TestNG测试的支持</li></ul><h3 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h3><h4 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h4><p>IOC（Inversion Of Control，控制反转）是一种设计思想，而不是一个具体的技术实现。IOC并非Spring特有，在其他语言中也有应用。</p><p>Spring IOC指的是：<strong>将原本在程序中手动创建对象的控制权，交给IOC容器来管理，并由IOC容器完成对象的注入</strong>。</p><h5 id="为什么叫控制反转？"><a href="#为什么叫控制反转？" class="headerlink" title="为什么叫控制反转？"></a>为什么叫控制反转？</h5><ul><li>控制：值的是对象创建（实例化、管理）的权利</li><li>反转：控制权交给外部环境（Spring框架、IOC容器）</li></ul><h5 id="IOC的好处"><a href="#IOC的好处" class="headerlink" title="IOC的好处"></a>IOC的好处</h5><p>这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IOC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</p><h5 id="IOC的实现"><a href="#IOC的实现" class="headerlink" title="IOC的实现"></a>IOC的实现</h5><p>Spring中的IOC的实现原理就是<strong>工厂模式+反射机制</strong></p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><h4 id="什么是Spring-Bean？"><a href="#什么是Spring-Bean？" class="headerlink" title="什么是Spring Bean？"></a>什么是Spring Bean？</h4><p>简单来说，Bean代指的就是那些被IOC容器所管理的对象</p><h4 id="将一个类声明为Bean的注解有哪些？"><a href="#将一个类声明为Bean的注解有哪些？" class="headerlink" title="将一个类声明为Bean的注解有哪些？"></a>将一个类声明为Bean的注解有哪些？</h4><ul><li>@Component：通用的注解，可标注任意类为Spring组件，如果一个Bean不知道属于那一层，可以使用@Component注解标注</li><li>@Repository：对应持久层，即Dao层，主要用于数据库相关操作</li><li>@Service：对应服务层，主要涉及一些复杂的逻辑，需要用到Dao层</li><li>@Controller：对应SpringMVC控制层，主要用于接受用户请求并调用Service层返回给前端页面</li></ul><h4 id="Component和-Bean的区别"><a href="#Component和-Bean的区别" class="headerlink" title="@Component和@Bean的区别"></a>@Component和@Bean的区别</h4><ul><li>@Component注解作用于类，而@Bean注解作用于方法</li><li>@Component通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中（我们使用@ComponentScan注解定义要扫描的路径，从中找出标识了需要装配的类，并自动装配到Spring的Bean容器中）。<br>@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean,@Bean告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。</li><li>@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring容器时，则只能通过 @Bean来实现。</li></ul><h4 id="注入Bean的注解有哪些"><a href="#注入Bean的注解有哪些" class="headerlink" title="注入Bean的注解有哪些"></a>注入Bean的注解有哪些</h4><p>Spring内置的@Autowired以及JDK内置的@Resource和@Inject都可以用于注入Bean</p><h4 id="Autowired和-Resource的区别是什么？"><a href="#Autowired和-Resource的区别是什么？" class="headerlink" title="@Autowired和@Resource的区别是什么？"></a>@Autowired和@Resource的区别是什么？</h4><ul><li>@Autowired是Spring提供的注解，@Resource是JDK提供的注解</li><li>@Autowired默认的注入方式为byType（根据类型进行匹配），@Resource默认注入方式为byName（根据名称进行匹配）</li><li>当一个接口存在多个实现类的情况下，@Autowired和@Resource都需要通过名称才能正确匹配到对应的Bean。@Autowired可以通过@Qualifier注解来显式指定名称，@Resource可以通过name属性来显式指定名称。</li></ul><h4 id="Bean的作用域有哪些？"><a href="#Bean的作用域有哪些？" class="headerlink" title="Bean的作用域有哪些？"></a>Bean的作用域有哪些？</h4><p>在Spring框架中，Bean的作用域是指在应用程序中创建和管理bean实例的生命周期和可见范围</p><ul><li>singleton：默认作用域。唯一bean实例，单例的；</li><li>prototype：每次请求都会创建一个新的bean实例；</li><li>request：每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效；</li><li>session：每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP session内有效；</li><li>global-session：这是一个不常用的作用域，它仅在使用基于portlet的Spring MVC时才有效。每个全局HTTP会话都会创建一个新的bean实例。</li></ul><h4 id="单例Bean的线程安全问题了解吗？"><a href="#单例Bean的线程安全问题了解吗？" class="headerlink" title="单例Bean的线程安全问题了解吗？"></a>单例Bean的线程安全问题了解吗？</h4><p>单例bean存在线程问题，主要是因为多个线程操作同一个对象的时候存在资源竞争</p><h5 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>在Bean中尽量避免定义可变的成员变量</li><li>在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐的一种方式）</li></ul><h4 id="Bean（JavaBean）的生命周期了解吗？"><a href="#Bean（JavaBean）的生命周期了解吗？" class="headerlink" title="Bean（JavaBean）的生命周期了解吗？"></a>Bean（JavaBean）的生命周期了解吗？</h4><p>Bean（即Java Bean）是Java语言中一种标准的可重用组件，它具有一些特定的属性和方法，可以在Java应用程序中重复使用。一个Bean的生命周期可以分为以下几个阶段：</p><ul><li>定义：在编写Java类的时候，可以将它定义为一个Bean。Bean通常具有一些特定的属性和方法，这些属性和方法可以通过JavaBean规范来定义。</li><li>实例化：一旦Java类被定义为Bean，它就可以被实例化。在Java程序中，可以通过使用Bean的构造函数来创建Bean的实例。</li><li>初始化：在Bean被实例化之后，需要对其进行初始化，以设置其属性和其他状态。这通常可以通过在Bean中定义初始化方法来完成，例如在Bean中定义一个名为“init”的方法。</li><li>使用：一旦Bean被初始化，就可以在Java应用程序中使用它。在使用Bean时，可以调用其方法并访问其属性。</li><li>销毁：当不再需要Bean时，需要将其销毁。在Java程序中，可以通过调用Bean的销毁方法来完成销毁操作，例如在Bean中定义一个名为“destroy”的方法。</li></ul><p><strong>总结：定义-&gt;实例化-&gt;初始化-&gt;使用-&gt;销毁</strong></p><h4 id="Spring-Bean的生命周期"><a href="#Spring-Bean的生命周期" class="headerlink" title="Spring Bean的生命周期"></a>Spring Bean的生命周期</h4><ul><li>实例化：在Spring容器中定义一个Bean之后，Spring会通过反射创建该Bean的实例</li><li>属性注入：在实例化后，Spring会通过setter方法或者带有@Autowired注解的属性注入，将Bean所需的属性值注入到Bean实例中</li><li>BeanPostProcessor处理：Spring容器会检查是否有实现了BeanPostProcessor接口的类，如果有，则会调用它们的postProcessBeforeInitialization()方法和postProcessAfterInitialization()方法，对Bean进行额外处理。</li><li>初始化：在Bean实例化并注入属性值之后，Spring容器会调用Bean的初始化方法。Bean可以通过实现InitializingBean接口或者在配置文件中使用init-method属性来定义初始化方法。</li><li>使用：初始化完成后，Spring容器会将Bean对象提供给应用程序使用</li><li>销毁：当Spring容器关闭时，会销毁所有Bean实例。Bean可以通过实现DisposableBean接口或者在配置文件中使用destroy-method属性来定义销毁方法。</li></ul><p>在Bean的生命周期中，BeanPostProcessor是一个重要的环节。BeanPostProcessor接口中定义了两个方法：postProcessBeforeInitialization()和postProcessAfterInitialization()。<br><strong>实现BeanPostProcessor接口的类可以在Bean初始化前后进行额外处理，例如修改Bean属性值、校验Bean等</strong>。</p><p><strong>总结：实例化-&gt;属性注入-&gt;BeanPostProcessor处理-&gt;初始化-&gt;使用-&gt;销毁</strong></p><h4 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h4><p>AOP（面向切面编程），用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块。可减少系统的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限、日志、事务等。</p><h4 id="AOP有哪些应用场景"><a href="#AOP有哪些应用场景" class="headerlink" title="AOP有哪些应用场景"></a>AOP有哪些应用场景</h4><ul><li>记录日志（调用方法后记录日志）</li><li>监控性能（统计方法运行时间）</li><li>权限控制（调用方法前校验是否有权限）</li><li>事务管理（调用方法前开启事务，调用方法后提交关闭事务）</li></ul><h4 id="AOP的实现方式"><a href="#AOP的实现方式" class="headerlink" title="AOP的实现方式"></a>AOP的实现方式</h4><p>AOP实现的关键在于<strong>代理模式</strong>，AOP代理主要分为<strong>静态代理</strong>和<strong>动态代理</strong>。静态代理的代表是AspectJ，动态代理的代表是Spring AOP</p><h5 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h5><p><strong>在编译期间</strong>，通过手动编写代理类的方式将横切关注点嵌入到目标对象的方法中。缺点是需要手动编写代理类，增加了代码量和维护难度。</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p><strong>在运行期间</strong>，通过Java提供的动态代理机制，生成代理对象并将横切逻辑织入到目标对象的方法中。动态代理分为<strong>JDK动态代理</strong>和<strong>CGLib动态代理</strong>两种方式</p><h6 id="JDK动态代理和CGLib动态代理的区别"><a href="#JDK动态代理和CGLib动态代理的区别" class="headerlink" title="JDK动态代理和CGLib动态代理的区别"></a>JDK动态代理和CGLib动态代理的区别</h6><ul><li>实现方式不同：<strong>JDK动态代理是基于接口的代理</strong>，它要求目标对象必须实现一个或多个接口。JDK动态代理通过反射机制在运行时动态地生成代理类，代理类实现了目标对象实现的所有接口，并将所有方法的调用都委托给InvocationHandler处理。而<strong>CGLIB动态代理则是基于继承的代理</strong>，它不要求目标对象实现任何接口。CGLIB动态代理通过继承目标对象，并重写其方法来实现代理，因此可以代理非接口类型的对象。</li><li>性能不同：由于<strong>JDK动态代理</strong>是基于接口的代理，它<strong>需要反射调用目标对象的方法</strong>，而反射调用的<strong>效率相对较低</strong>。而<strong>CGLIB动态代理</strong>则是通过生成子类来实现代理，因此<strong>不需要反射调用目标对象的方法，可以获得更高的性能</strong>。但是由于生成子类需要消耗一定的时间和内存，因此在创建代理对象时会比JDK动态代理更慢。</li><li>应用场景不同：由于<strong>JDK动态代理</strong>是基于接口的代理，因此<strong>适用于代理接口的场景</strong>。而<strong>CGLIB动态代理</strong>则<strong>适用于代理类的场景</strong>，比如代理Spring的Bean时，Spring默认使用CGLIB动态代理。另外，由于CGLIB动态代理可以代理非接口类型的对象，因此它还适用于需要代理的类没有实现接口的情况。</li></ul><h4 id="Spring-AOP和AspectJ-AOP的区别"><a href="#Spring-AOP和AspectJ-AOP的区别" class="headerlink" title="Spring AOP和AspectJ AOP的区别"></a>Spring AOP和AspectJ AOP的区别</h4><ul><li>Spring AOP属于运行时增强，而AspectJ是编译时增强</li><li>Spring AOP已经集成AspectJ，AspectJ相比于SpringAOP功能更加强大</li><li>如果切面比较少，两者性能差异不大。如果切面太多，最好选择AspectJ，它比SpringAOP快的多</li></ul><h4 id="Spring框架中用到哪些设计模式"><a href="#Spring框架中用到哪些设计模式" class="headerlink" title="Spring框架中用到哪些设计模式"></a>Spring框架中用到哪些设计模式</h4><ul><li>工厂模式：Spring使用工厂模式通过<code>BeanFactory</code>、<code>ApplicationContext</code>创建bean对象</li><li>代理模式：SpringAOP功能的实现</li><li>单例模式：Spring中Bean模式是单例模式的</li><li>模板模式：Spring中<code>jdbcTemplate</code>、<code>HibernateTemplate</code>等以<code>Template</code>结尾的对数据库操作的类，它们就使用到了模板模式</li><li>包装器设计模式 : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li><li>观察者模式: Spring 事件驱动模型就是观察者模式很经典的一个应用。</li><li>适配器模式 : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li></ul><h4 id="Spring的事务"><a href="#Spring的事务" class="headerlink" title="Spring的事务"></a>Spring的事务</h4><h5 id="Spring管理事务的方式有哪几种？"><a href="#Spring管理事务的方式有哪几种？" class="headerlink" title="Spring管理事务的方式有哪几种？"></a>Spring管理事务的方式有哪几种？</h5><ul><li>编程式事务：在代码中硬编码（不推荐使用）</li><li>声明式事务：在XML配置文件中配置或者直接基于注解（推荐使用）</li></ul><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="说说自己对SpringMVC的了解"><a href="#说说自己对SpringMVC的了解" class="headerlink" title="说说自己对SpringMVC的了解"></a>说说自己对SpringMVC的了解</h3><p><strong>SpringMVC是一个基于MVC架构、用来简化web应用开发的框架</strong>，通过把<strong>Model、View、Controller</strong>分离，将Web层进行<strong>职责解耦</strong>，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p><h3 id="SpringMVC的核心组件有哪些"><a href="#SpringMVC的核心组件有哪些" class="headerlink" title="SpringMVC的核心组件有哪些"></a>SpringMVC的核心组件有哪些</h3><ul><li>DispatcherServlet：<strong>中央处理器</strong>，负责接收请求、分发并给予客户端响应</li><li>HandlerMapping：<strong>处理器映射器</strong>，根据uri去匹配查找能处理的Handler，并会将请求设计到的拦截器和Handler一起封装</li><li>HandlerAdapter：<strong>处理器适配器</strong>，根据HandlerMapping找到的Handler，适配执行对应的Handler</li><li>Handler：<strong>请求处理器</strong>，处理实际请求的处理器</li><li>ViewResolver：<strong>视图解析器</strong>，根据Handler返回逻辑视图/视图，解析并渲染真正的视图，并传递给DispatcherServlet响应客户端</li></ul><h3 id="SpringMVC工作原理"><a href="#SpringMVC工作原理" class="headerlink" title="SpringMVC工作原理"></a>SpringMVC工作原理</h3><p>1、所有请求到达DispatcherServlet</p><p>2、DispatcherServlet通过HandlerMapping确定请求所对应的Handler（也就是我们平常说的<code>Controller</code>控制器）</p><p>3、DispatcherServlet通过HandlerAdapter执行Handler</p><p>4、Handler会根据请求的信息执行相应的业务逻辑</p><p>5、Handler执行完业务逻辑后返回ModelAndView</p><p>6、DispatcherServlet会根据ViewResolver（视图解析器）将视图名称解析成视图对象</p><p>7、视图对象会使用模型数据渲染视图并将最终渲染好的视图返回给客户端</p><p>8、DispatcherServlet将渲染好的视图返回给客户端，请求处理完成</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="什么是SpringBoot？"><a href="#什么是SpringBoot？" class="headerlink" title="什么是SpringBoot？"></a>什么是SpringBoot？</h3><p>SpringBoot是Spring开源组织下的子项目，是Spring组件一站式解决方案，旨在于简化Spring开发</p><h3 id="为什么使用SpringBoot？"><a href="#为什么使用SpringBoot？" class="headerlink" title="为什么使用SpringBoot？"></a>为什么使用SpringBoot？</h3><ul><li>独立运行：SpringBoot内嵌了各种Servlet容器，tomcat、jetty等，不需要打成war包部署到容器中，只需打成jar包就可以独立运行</li><li>简化配置：不需要编写大量样板代码、XML配置和注释</li><li>自动装配</li><li>应用监控：提供了一系列端口可监控服务与应用</li></ul><h3 id="介绍一下-SpringBootApplication注解"><a href="#介绍一下-SpringBootApplication注解" class="headerlink" title="介绍一下@SpringBootApplication注解"></a>介绍一下@SpringBootApplication注解</h3><p><code>@SpringBootApplication</code>可看作是<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>注解的集合</p><ul><li>@EnableAutoConfiguration：启用SpringBoot的自动装配机制</li><li>@ComponentScan：扫描被@Component（@Service,@Controller）注解的bean，注解默认会扫描改类所在包下所有的类</li><li>@Configuration：允许在上下文中注册额外的bean或导入其他配置类</li></ul><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="什么是MyBatis"><a href="#什么是MyBatis" class="headerlink" title="什么是MyBatis"></a>什么是MyBatis</h3><ul><li>MyBatis是一个开源的Java持久层框架（<strong>半ORM框架</strong>），它可以用来简化数据访问层的开发。</li><li>它的主要功能是将Java对象和数据库中的数据进行映射，以及提供一系列的查询语句来操作数据。</li><li>其优势在于它可以很好地支持定制化SQL语句，使得开发者可以根据实际需求自由地编写SQL语句。</li><li>此外，Mybatis还提供了缓存机制来提高查询效率，并且可以与Spring框架很好地集成。</li></ul><h3 id="MyBatis的优缺点"><a href="#MyBatis的优缺点" class="headerlink" title="MyBatis的优缺点"></a>MyBatis的优缺点</h3><ul><li>优点<ul><li>基于SQL语句编程，灵活，不会对应用程序或数据库的现有设计造成任何影响；SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）</li><li>能够与Spring很好的集成</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护</li></ul></li><li>缺点<ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul></li></ul><h3 id="为什么说MyBatis是半自动ORM框架？"><a href="#为什么说MyBatis是半自动ORM框架？" class="headerlink" title="为什么说MyBatis是半自动ORM框架？"></a>为什么说MyBatis是半自动ORM框架？</h3><p>因为相对于全自动ORM框架（如Hibernate）来说，<strong>需要开发者手动编写SQL语句，而不是完全由框架自动生成SQL语句</strong></p><h3 id="和-的区别是什么"><a href="#和-的区别是什么" class="headerlink" title="#{}和${}的区别是什么"></a>#{}和${}的区别是什么</h3><ul><li>#{}是预编译处理，${}是字符串替换</li><li>MyBatis处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值</li><li>MyBatis处理${}时，就是把其替换变量的值</li></ul><p>使用#{}可以有效防止SQL注入，提高系统安全性</p><h3 id="MyBatis是如何分页的"><a href="#MyBatis是如何分页的" class="headerlink" title="MyBatis是如何分页的"></a>MyBatis是如何分页的</h3><ul><li>MyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页</li><li>可以在sql内直接书写带有物理分页的参数来完成物理分页功能</li><li>也可以使用分页插件来完成物理分页</li></ul><h3 id="MyBatis动态SQL的标签"><a href="#MyBatis动态SQL的标签" class="headerlink" title="MyBatis动态SQL的标签"></a>MyBatis动态SQL的标签</h3><ul><li><code>&lt;if&gt;</code>标签：判断条件为真时，包含在标签内的SQL语句才会被包含在最终生成的SQL语句中。</li><li><code>&lt;choose&gt;</code>标签：类似于Java语言中的switch语句，根据条件匹配相应的子元素。</li><li><code>&lt;when&gt;</code>标签：<code>&lt;choose&gt;</code>标签的子标签，用于定义匹配的条件和生成的SQL语句。</li><li><code>&lt;otherwise&gt;</code>标签：<code>&lt;choose&gt;</code>标签的默认分支，当所有条件不匹配时，会执行<code>&lt;otherwise&gt;</code>标签中的SQL语句。</li><li><code>&lt;trim&gt;</code>标签：可以删除或包含在生成的SQL语句中的部分内容。</li><li><code>&lt;where&gt;</code>标签：可以根据条件动态生成<code>where</code>语句。</li><li><code>&lt;set&gt;</code>标签：用于根据条件动态生成<code>set</code>语句，主要用于更新操作。</li><li><code>&lt;foreach&gt;</code>标签：可以将Java集合中的元素作为SQL语句中的参数值，用于批量插入、更新、删除等操作。</li><li><code>&lt;bind&gt;</code>标签：可以从OGNL(对象图导航语言)表达式中创建一个变量并将其绑定到上下文。</li></ul><h3 id="MyBatis的一级缓存、二级缓存"><a href="#MyBatis的一级缓存、二级缓存" class="headerlink" title="MyBatis的一级缓存、二级缓存"></a>MyBatis的一级缓存、二级缓存</h3><ul><li>一级缓存<ul><li><strong>一级缓存是SqlSession级别的缓存，它是默认开启的，存储了查询结果对象的引用</strong>，避免了重复查询数据库的操作，从而提升了效率</li><li>一级缓存的作用域为SqlSession，只在当前的SqlSession中有效，当SqlSession关闭时，缓存也就失效了。</li><li>一级缓存的清除策略是默认的，即在执行任何写操作（插入、更新、删除）之后，会清空一级缓存中所有的查询结果对象</li></ul></li><li>二级缓存<ul><li><strong>二级缓存是Mapper级别的缓存，它需要手动开启，存储了查询结果对象的拷贝</strong>。</li><li>二级缓存的作用域是Mapper，多个SqlSession可以共享同一个Mapper的二级缓存。</li><li>当不同的SqlSession查询相同的Mapper和SQL语句时，如果二级缓存中有缓存结果，则直接返回缓存结果，否则查询数据库并将结果放入缓存中。二级缓存的清除策略有多种，可以根据时间、大小、刷新等条件进行清除。</li></ul></li></ul><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><h3 id="什么是MyBatis-Plus"><a href="#什么是MyBatis-Plus" class="headerlink" title="什么是MyBatis-Plus"></a>什么是MyBatis-Plus</h3><p>MyBatis-Plus是一个MyBatis的增强工具，在MyBatis的基础上只做增强不做改变，为简化开发、提高效率而生</p><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><h3 id="BIO-x2F-NIO-x2F-AIO的区别"><a href="#BIO-x2F-NIO-x2F-AIO的区别" class="headerlink" title="BIO/NIO/AIO的区别"></a>BIO/NIO/AIO的区别</h3><ul><li>BIO（Blocking I/O）：同步阻塞I/O模式</li><li>NIO（Non-blocking/New I/O）：同步非阻塞I/O</li><li>AIO（Asynchronous I/O）：异步非阻塞I/O，AIO也就是NIO 2</li></ul><h3 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h3><ul><li>Netty是一个基于<strong>NIO</strong>的client-server（客户端服务器）框架，使用它可以简单快速地开发网络应用程序</li><li>它极大低简化并优化了TCP和UDP套接字服务器等网络编程，并且性能以及安全性等很多方面甚至都要更好</li><li>支持多种协议，如FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议</li></ul><h3 id="为啥不直接用NIO"><a href="#为啥不直接用NIO" class="headerlink" title="为啥不直接用NIO"></a>为啥不直接用NIO</h3><ul><li>NIO的编程模型复杂且存在一些BUG，并且对编程功底要求比较高</li><li>NIO在面对断连、重连、包丢失、粘包等问题时处理过程非常复杂。</li></ul><h3 id="为啥用Netty"><a href="#为啥用Netty" class="headerlink" title="为啥用Netty"></a>为啥用Netty</h3><ul><li>统一的API，支持多种传输类型，阻塞和非阻塞的</li><li>简单强大的线程模型</li><li>自带编解码器解决TCP粘包/拆包问题</li><li>自带各种协议栈</li><li>安全性不错、社区活跃、成熟稳定</li></ul><h4 id="Netty应用场景了解吗"><a href="#Netty应用场景了解吗" class="headerlink" title="Netty应用场景了解吗"></a>Netty应用场景了解吗</h4><p>从理论上来说，NIO可以做的事情，使用Netty都可以做并且更好，Netty主要用来做网络通信</p><ul><li>做为RPC框架的网络通信工具</li><li>实现一个自己的HTTP服务器</li><li>实现一个即时通讯系统</li><li>实现消息推送系统</li></ul><h4 id="哪些项目用到Netty"><a href="#哪些项目用到Netty" class="headerlink" title="哪些项目用到Netty"></a>哪些项目用到Netty</h4><p>Dubbo、RocketMQ、ElasticSearch，gRPC等等</p><h4 id="介绍一下Netty的核心组件"><a href="#介绍一下Netty的核心组件" class="headerlink" title="介绍一下Netty的核心组件"></a>介绍一下Netty的核心组件</h4><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><h3 id="微服务与分布式的区别"><a href="#微服务与分布式的区别" class="headerlink" title="微服务与分布式的区别"></a>微服务与分布式的区别</h3><p>分布式系统（Distributed System）是一种由多个独立计算机组成的系统，这些计算机通过网络进行通信和协作，以共同完成任务。它们共享资源、数据和功能，使得系统更加灵活、可扩展和可靠。分布式系统的重点是处理系统的复杂性，以便能够更好地管理和协调各个计算机之间的通信和资源。</p><p>微服务（Microservices）是一种软件开发模式，将应用程序分解为小型、松耦合的服务，每个服务运行在自己的进程中，并通过轻量级的通信机制进行交互。每个服务都可以单独部署、测试、维护和扩展。微服务的重点是提高软件开发的灵活性和可维护性，以便能够更快速地交付业务价值。</p><h4 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h4><ul><li>视角不同：分布式系统从整体上看待系统的构成和功能，而微服务从单个服务的角度来看待系统的构成和功能。</li><li>粒度不同：分布式系统的粒度较大，涵盖整个系统，而微服务的粒度较小，每个服务都非常简单，只关注特定的业务逻辑。</li><li>沟通机制不同：分布式系统通常使用消息传递或共享内存等机制进行通信，而微服务则使用轻量级的HTTP/REST API进行通信。</li></ul><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><h3 id="何为RPC"><a href="#何为RPC" class="headerlink" title="何为RPC"></a>何为RPC</h3><p>RPC（Remote Procedure Call）<strong>远程过程调用</strong>，为了让你调用远程方法像调用本地方法一样简单</p><h3 id="RPC的原理"><a href="#RPC的原理" class="headerlink" title="RPC的原理"></a>RPC的原理</h3><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，用于在网络中的不同计算机上执行远程过程调用。它的基本原理是客户端应用程序通过网络调用服务端应用程序的函数或方法，并等待函数或方法的返回结果。</p><ul><li>客户端调用过程：客户端应用程序调用远程过程，就像调用本地函数一样。调用参数会被打包成网络可传输的格式，然后发送给服务端。</li><li>网络传输：客户端通过网络把打包好的参数传输给服务端，使用HTTP、TCP/IP、UDP等网络协议进行传输。</li><li>服务端接收请求：服务端接收到请求后，解包参数并调用本地的函数或方法。</li><li>函数执行：服务端执行本地函数或方法，使用调用参数并生成结果。</li><li>返回结果：服务端把函数的返回结果打包成网络可传输的格式，通过网络发送给客户端。</li><li>客户端接收结果：客户端接收到服务端返回的结果，解包结果并使用它。</li></ul><p>总之，RPC使得分布式应用程序中的不同计算机之间的通信变得更加容易和可靠，通过将过程调用封装成网络通信，使得应用程序可以像调用本地函数一样调用远程函数。</p><h3 id="常用的RPC框架"><a href="#常用的RPC框架" class="headerlink" title="常用的RPC框架"></a>常用的RPC框架</h3><ul><li>Dubbo：是一款微服务框架，为大规模微服务实践提供高性能 RPC 通信、流量治理、可观测性等解决方案， 涵盖 Java、Golang 等多种语言 SDK 实现。</li><li>Motan：是新浪微博开源的一款 RPC 框架，据说在新浪微博正支撑着千亿次调用。</li><li>gRPC：Google 开源的一个高性能、通用的开源 RPC 框架。其由主要面向移动应用开发并基于 HTTP/2 协议标准而设计（支持双向流、消息头压缩等功能，更加节省带宽），基于 ProtoBuf 序列化协议开发，并且支持众多开发语言。</li></ul><h3 id="HTTP和RPC的区别"><a href="#HTTP和RPC的区别" class="headerlink" title="HTTP和RPC的区别"></a>HTTP和RPC的区别</h3><ul><li>功能: HTTP旨在传输数据和文件，而RPC旨在在不同的计算机上调用远程过程。</li><li>传输协议和编码格式: HTTP使用HTTP协议进行通信，而RPC可以使用不同的协议和编码格式（例如TCP、UDP、HTTP等，并且可以支持多种编码格式，如二进制、JSON等。RPC通常使用二进制编码格式，可以更高效地传输数据）</li><li>性能: RPC通常比HTTP更高效，因为它可以使用二进制编码格式和更轻量级的传输协议。</li></ul><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><h3 id="什么是Dubbo"><a href="#什么是Dubbo" class="headerlink" title="什么是Dubbo"></a>什么是Dubbo</h3><p>Apache Dubbo 是⼀个⾼性能，轻量级，基于Java的RPC框架。Dubbo提供三个关键功能，包括基 于接⼝的远程调⽤，容错和负载平衡以及⾃动服务注册和发现。</p><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="消息队列-1"><a href="#消息队列-1" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="消息队列的作用"><a href="#消息队列的作用" class="headerlink" title="消息队列的作用"></a>消息队列的作用</h3><ul><li><strong>通过异步处理提高系统性能（减少响应所需时间）</strong></li><li><strong>削峰/限流</strong></li><li><strong>降低系统耦合性</strong></li><li><strong>实现分布式事务</strong></li></ul><h3 id="使用消息队列会带来哪些问题"><a href="#使用消息队列会带来哪些问题" class="headerlink" title="使用消息队列会带来哪些问题"></a>使用消息队列会带来哪些问题</h3><ul><li><strong>系统可用性降低：</strong> 系统可用性在某种程度上降低，为什么这样说呢？在加入 MQ 之前，你不用考虑消息丢失或者说 MQ 挂掉等等的情况，但是，引入 MQ 之后你就需要去考虑了！</li><li><strong>系统复杂性提高：</strong> 加入 MQ 之后，你需要保证消息没有被重复消费、处理消息丢失的情况、保证消息传递的顺序性等等问题！</li><li><strong>一致性问题：</strong> 我上面讲了消息队列可以实现异步，消息队列带来的异步确实可以提高系统响应速度。但是，万一消息的真正消费者并没有正确消费消息怎么办？这样就会导致数据不一致的情况了！</li></ul><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="Kafka是什么？"><a href="#Kafka是什么？" class="headerlink" title="Kafka是什么？"></a>Kafka是什么？</h3><p>Kafka是一个<strong>分布式的、基于发布/订阅模式</strong>的消息队列，主要应用于大数据实时处理领域</p><p>流平台具有：</p><ul><li>消息队列：发布和订阅消息流</li><li>容错的持久方式存储记录消息流：Kafka会将消息持久化到磁盘，有效避免了消息丢失的风险</li><li>流式处理平台：在消息发布的时候进行处理，Kafka提供了一个完整的流式处理类库</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><strong>消息队列</strong>：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。</li><li><strong>数据处理</strong>：构建实时的流数据处理程序来转换或处理数据流。</li></ul><h4 id="Kafka的优势"><a href="#Kafka的优势" class="headerlink" title="Kafka的优势"></a>Kafka的优势</h4><p>Kafka相比于其他消息队列，主要的优势如下：</p><ul><li><strong>极致的性能</strong>：基于Scala和Java语言开发，设计中大量使用了批量处理和异步的思想，最高可以每秒处理千万级别的消息</li><li><strong>生态系统兼容性无可匹敌</strong>：Kakfa于周边生态系统的兼容性是最好的，没有之一，尤其在大数据和流计算领域</li></ul><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="RabbitMQ的工作模式"><a href="#RabbitMQ的工作模式" class="headerlink" title="RabbitMQ的工作模式"></a>RabbitMQ的工作模式</h3><ul><li>简单模式</li><li>work工作模式</li><li>pub/sub发布订阅模式</li><li>routing路由模式</li><li>topic主题模式</li></ul><h3 id="什么是死信队列？如何导致的？"><a href="#什么是死信队列？如何导致的？" class="headerlink" title="什么是死信队列？如何导致的？"></a>什么是死信队列？如何导致的？</h3><p>DLX，全称为 <code>Dead-Letter-Exchange</code>，死信交换器，死信邮箱。当消息在一个队列中变成死信 (<code>dead message</code>) 之后，它能被重新被发送到DLX，与DLX绑定  的队列就称之为死信队列。</p><h4 id="导致死信的原因"><a href="#导致死信的原因" class="headerlink" title="导致死信的原因"></a>导致死信的原因</h4><ul><li>消息被拒</li><li>消息TTL过期</li><li>队列满了，无法再添加</li></ul><h3 id="什么是延迟队列？RabbitMQ怎么实现延迟队列"><a href="#什么是延迟队列？RabbitMQ怎么实现延迟队列" class="headerlink" title="什么是延迟队列？RabbitMQ怎么实现延迟队列?"></a>什么是延迟队列？RabbitMQ怎么实现延迟队列?</h3><p>延迟队列指的是存储对应的延迟信息，消息被发送之后，并不想让消费者立即拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费</p><p>RabbitMQ本身是没有延迟队列的，要实现延迟队列，需要使用RabbitMQ的死信交换机（DLX）和消息的存活时间TTL（Time to Live）。模拟延迟队列的功能</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式：保证一个类只有一个实例并提供一个访问它的全局访问点</p><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><p>线程不安全，延迟初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    懒汉模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><p>线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，但具体还是根据项目选择。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span> </code></pre><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="双重锁模式"><a href="#双重锁模式" class="headerlink" title="双重锁模式"></a>双重锁模式</h4><p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="单例模式的懒汉和饿汉的区别"><a href="#单例模式的懒汉和饿汉的区别" class="headerlink" title="单例模式的懒汉和饿汉的区别"></a>单例模式的懒汉和饿汉的区别</h4><ul><li>懒汉：在类加载的时候不会被初始化，非线程安全</li><li>饿汉：在类加载时时候就完成初始化，线程安全</li></ul><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式是一种<strong>行为型</strong>设计模式，它允许在运行时动态选择算法或行为，而不必在编译时硬编码这些选择。使用策略模式可以使代码更具有可拓展性、可维护性和可重用性。</p><p>在策略模式中，一个对象或方法将根据需要选择一种算法或行为，而不必知道该算法或行为的实现细节。通常，这些算法或行为被定义为一个接口或抽象类，并且可以有多个不同的实现，称为策略类。然后，一个上下文类使用这些策略类，并根据需要动态选择一个策略来执行相应的算法或行为。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><h3 id="为啥使用Postgresql而不用MySQL"><a href="#为啥使用Postgresql而不用MySQL" class="headerlink" title="为啥使用Postgresql而不用MySQL"></a>为啥使用Postgresql而不用MySQL</h3><p>PostgreSQL (pgsql) 和 MySQL 都是常用的关系型数据库管理系统 (RDBMS)。虽然它们都是开源软件，但在一些方面有着不同的设计和实现。</p><p>以下是一些可能使人们选择使用 PostgreSQL 而不是 MySQL 的原因：</p><ol><li>数据类型支持：PostgreSQL 提供了更多的数据类型，如数组、范围类型、JSON 等，这些数据类型对于一些应用程序可能非常有用，而 MySQL 则支持较少的数据类型。</li><li>事务支持：PostgreSQL 在事务处理方面非常强大，支持完全的 ACID 属性，而 MySQL 在这方面的支持则有限。</li><li>外键约束：PostgreSQL 对于外键约束的支持更加强大和灵活，可以进行更多的操作和限制，而 MySQL 则相对简单。</li><li>扩展性：PostgreSQL 支持更多的扩展，如自定义类型、自定义函数、存储过程等，这些扩展对于一些特殊需求的应用程序可能非常有用。</li><li>性能：PostgreSQL 在某些方面的性能可能会优于 MySQL，例如复杂查询和并发读取。</li></ol><p>当然，选择 PostgreSQL 还是 MySQL 还要考虑到具体的应用场景和需求。</p>]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-冒泡排序</title>
      <link href="/2022/11/15/pai-xu-mou-pao-pai-xu/"/>
      <url>/2022/11/15/pai-xu-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>冒泡排序是最基础的排序算法，由于其直观性，经常作为首个介绍的排序算法。其原理为：</p><ul><li>内循环： 使用相邻双指针 j , j + 1 从左至右遍历，依次比较相邻元素大小，若左元素大于右元素则将它们交换；遍历完成时，最大元素会被交换至数组最右边 。</li><li>外循环： 不断重复「内循环」，每轮将当前最大元素交换至 剩余未排序数组最右边 ，直至所有元素都被交换至正确位置时结束。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/phn3m1/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/phn3m1/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-快速排序</title>
      <link href="/2022/11/15/pai-xu-kuai-su-pai-xu/"/>
      <url>/2022/11/15/pai-xu-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>快速排序算法有两个核心点，分别是 <strong>哨兵划分</strong> 和 <strong>递归</strong></p><h4 id="哨兵划分"><a href="#哨兵划分" class="headerlink" title="哨兵划分"></a>哨兵划分</h4><p>以数组某个元素（一般选取首元素）为<strong>基准数</strong>，将所有<strong>小于基准数的元素移动到其左边，大于基准数的元素移动至其右边</strong>。<br>通过一轮<strong>哨兵划分</strong>，可将数组排序问题拆分为 两个较短数组的排序问题 （本文称之为左（右）子数组）。<br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151555807.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151556566.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151557910.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151555113.png"></p><pre class=" language-text"><code class="language-text">初始化“哨兵”索引位置，以arr[l]为基准数循环交换，两哨兵相遇时跳出    从右向左 查找 首个小于基准数的元素    从左向右 查找 首个大约基准数的元素    交换 arr[i] 和 arr[j]交换基准数 arr[l] 和 arr[i]</code></pre><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>对<strong>左子数组</strong>和<strong>右子数组</strong>分别<strong>递归</strong>执行<strong>哨兵划分</strong>，直至子数组长度为1时终止递归，即可完成对整个数组的排序</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 找到哨兵</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归左数组</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归右数组</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 找哨兵     *     * @param nums     * @param l     * @param r     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以nums[l]作为基准数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// i为左，j为右</span>            <span class="token comment" spellcheck="true">// 从右向左找首个小于基准数l（i）的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从左向右找首个大于基准数l（i）的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 开始交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 相等时，交换基准数与当前位置</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://leetcode.cn/leetbook/read/grokking-algorithms/royq0v/">https://leetcode.cn/leetbook/read/grokking-algorithms/royq0v/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装window常用开发软件</title>
      <link href="/2022/11/01/an-zhuang-window-chang-yong-kai-fa-ruan-jian/"/>
      <url>/2022/11/01/an-zhuang-window-chang-yong-kai-fa-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="Navicat16破解版安装包"><a href="#Navicat16破解版安装包" class="headerlink" title="Navicat16破解版安装包"></a>Navicat16破解版安装包</h3><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Navcat16%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB.zip">https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Navcat16%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB.zip</a></p><h3 id="XShell7全套安装包"><a href="#XShell7全套安装包" class="headerlink" title="XShell7全套安装包"></a>XShell7全套安装包</h3><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Xshell7%26%26Xftp7.zip">https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Xshell7%26%26Xftp7.zip</a></p>]]></content>
      
      
      <categories>
          
          <category> 装机软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> navicat </tag>
            
            <tag> 装机软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坐标系转换SQL版</title>
      <link href="/2022/11/01/zuo-biao-xi-zhuan-huan-sql-ban/"/>
      <url>/2022/11/01/zuo-biao-xi-zhuan-huan-sql-ban/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">坐标系</th><th align="center">解释</th><th align="center">使用地图</th></tr></thead><tbody><tr><td align="center">WGS84</td><td align="center">地球坐标系，国际上通用的坐标系。设备一般包含GPS芯片或者北斗芯片获取的经纬度为WGS84地理坐标系,最基础的坐标，谷歌地图在非中国地区使用的坐标系</td><td align="center">GPS/谷歌地图卫星</td></tr><tr><td align="center">GCJ02</td><td align="center">火星坐标系，是由中国国家测绘局制订的地理信息系统的坐标系统。并要求在中国使用的地图产品使用的都必须是加密后的坐标，而这套WGS84加密后的坐标就是GCJ02。</td><td align="center">腾讯(搜搜)地图，阿里云地图，高德地图，谷歌国内地图</td></tr><tr><td align="center">BD09</td><td align="center">百度坐标系，百度在GCJ02的基础上进行了二次加密</td><td align="center">百度地图</td></tr></tbody></table><h4 id="百度地图坐标系转高德地图（BD09转GCJ02）"><a href="#百度地图坐标系转高德地图（BD09转GCJ02）" class="headerlink" title="百度地图坐标系转高德地图（BD09转GCJ02）"></a>百度地图坐标系转高德地图（BD09转GCJ02）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                    longitude <span class="token operator">-</span> <span class="token number">0.0065</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>            ATAN2<span class="token punctuation">(</span><span class="token punctuation">(</span>                    latitude <span class="token operator">-</span> <span class="token number">0.006</span>                     <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                    longitude <span class="token operator">-</span> <span class="token number">0.0065</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span><span class="token punctuation">(</span>                        latitude <span class="token operator">-</span> <span class="token number">0.006</span>                         <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'百度地图'</span><span class="token punctuation">;</span></code></pre><h4 id="高德地图（谷歌地图-x2F-腾讯地图）坐标系转百度地图坐标系-（GCJ02转BD09）"><a href="#高德地图（谷歌地图-x2F-腾讯地图）坐标系转百度地图坐标系-（GCJ02转BD09）" class="headerlink" title="高德地图（谷歌地图/腾讯地图）坐标系转百度地图坐标系  （GCJ02转BD09）"></a>高德地图（谷歌地图/腾讯地图）坐标系转百度地图坐标系  （GCJ02转BD09）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span> longitude <span class="token operator">*</span> longitude <span class="token operator">+</span> latitude <span class="token operator">*</span> latitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> latitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span> latitude<span class="token punctuation">,</span> longitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span> longitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0065</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span> longitude <span class="token operator">*</span> longitude <span class="token operator">+</span> latitude <span class="token operator">*</span> latitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> latitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>        ATAN2<span class="token punctuation">(</span> latitude<span class="token punctuation">,</span> longitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span> longitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.006</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'谷歌地图/高德地图/腾讯地图'</span><span class="token punctuation">;</span></code></pre><h4 id="GPS转谷歌地图-x2F-高德地图-x2F-腾讯地图-（WGS84转GCJ02）"><a href="#GPS转谷歌地图-x2F-高德地图-x2F-腾讯地图-（WGS84转GCJ02）" class="headerlink" title="GPS转谷歌地图/高德地图/腾讯地图 （WGS84转GCJ02）"></a>GPS转谷歌地图/高德地图/腾讯地图 （WGS84转GCJ02）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    SQRT<span class="token punctuation">(</span>                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    coordinate_system <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'GPS'</span><span class="token punctuation">;</span></code></pre><h4 id="GPS转百度地图（实际上就是，先转高德，再转百度地图）"><a href="#GPS转百度地图（实际上就是，先转高德，再转百度地图）" class="headerlink" title="GPS转百度地图（实际上就是，先转高德，再转百度地图）"></a>GPS转百度地图（实际上就是，先转高德，再转百度地图）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                         <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                         <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0065</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>            ATAN2<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.006</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'GPS'</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 坐标系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合redis</title>
      <link href="/2022/11/01/springboot-zheng-he-redis/"/>
      <url>/2022/11/01/springboot-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<h3 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonTypeInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LaissezFaireSubTypeValidator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 14:44 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//JSON序列化配置</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String 序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CachingConfigurerSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheWriter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 16:28 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以锁写入的方式创建RedisCacheWriter对象</span>        RedisCacheWriter writer <span class="token operator">=</span> RedisCacheWriter<span class="token punctuation">.</span><span class="token function">lockingRedisCacheWriter</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置CacheManager的Value序列化方式</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisSerializationContext<span class="token punctuation">.</span>SerializationPair pair <span class="token operator">=</span> RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建默认缓存配置对象、 将@Cacheable缓存key值时默认会给value或cacheNames后加上双冒号 改为 单冒号</span>        RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">computePrefixWith</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 14:51 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span>     <span class="token key atrule">password</span><span class="token punctuation">:</span>     <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制）</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms        <span class="token comment" spellcheck="true"># 连接池中的最大空闲连接</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token comment" spellcheck="true"># 连接池中的最小空闲连接</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 连接超时时间（毫秒）默认是2000ms</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 2000ms</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置图床</title>
      <link href="/2022/11/01/picgo-pei-zhi-tu-chuang/"/>
      <url>/2022/11/01/picgo-pei-zhi-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h3 id="官网下载最新正式版并安装"><a href="#官网下载最新正式版并安装" class="headerlink" title="官网下载最新正式版并安装"></a>官网下载最新正式版并安装</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><h3 id="配置阿里云OSS"><a href="#配置阿里云OSS" class="headerlink" title="配置阿里云OSS"></a>配置阿里云OSS</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011524621.png"></p><h3 id="Typora配置PicGo"><a href="#Typora配置PicGo" class="headerlink" title="Typora配置PicGo"></a>Typora配置PicGo</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011526352.png"></p>]]></content>
      
      
      <categories>
          
          <category> PicGo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建MySQL的主从复制</title>
      <link href="/2022/10/31/docker-da-jian-mysql-de-zhu-cong-fu-zhi/"/>
      <url>/2022/10/31/docker-da-jian-mysql-de-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="docker拉取MySQL5-7的镜像"><a href="#docker拉取MySQL5-7的镜像" class="headerlink" title="docker拉取MySQL5.7的镜像"></a>docker拉取MySQL5.7的镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h3 id="创建主库的数据目录"><a href="#创建主库的数据目录" class="headerlink" title="创建主库的数据目录"></a>创建主库的数据目录</h3><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/mysql/mysql-master/{data,conf,log}</code></pre><h3 id="创建主库配置文件my-cnf"><a href="#创建主库配置文件my-cnf" class="headerlink" title="创建主库配置文件my.cnf"></a>创建主库配置文件my.cnf</h3><pre class=" language-shell"><code class="language-shell">vim /usr/local/mysql/mysql-master/conf/my.cnf</code></pre><pre class=" language-shell"><code class="language-shell">[mysqld]## 设置server_id，在同一局域网中需要唯一server_id=1## 指定不需要同步的数据库名称binlog-ignore-db=mysql## 指定需要同步的数据库## binlog-do-db=db1## 开启二进制日志功能log-bin=mall-mysql-bin## 数据库时区default-time_zone='+8:00'## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M## 设置使用的二进制日志格式（row-行级别；statement=语句级别；mixed-混合级别）binlog_format=mixed## 二进制日志过期清理时间。默认为0，表示不自动清理expire_logs_days=7## 忽略主从复制中遇到的所有错误活指定的错误类型，避免slave端复制中断## 如：1062错误码代表主键重复；1032错误码代表主从数据库数据不一致slave_skip_errors=1062</code></pre><h3 id="启动主库"><a href="#启动主库" class="headerlink" title="启动主库"></a>启动主库</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 3308:3306 --privileged=true \-v /usr/local/mysql/mysql-master/log:/var/log/mysql  \-v /usr/local/mysql/mysql-master/data:/var/lib/mysql  \-v /usr/local/mysql/mysql-master/conf:/etc/mysql/conf.d \-e MYSQL_ROOT_PASSWORD=root123456 \--name mysql-master mysql:5.7</code></pre><h3 id="查看主库容器的ip并记录起来"><a href="#查看主库容器的ip并记录起来" class="headerlink" title="查看主库容器的ip并记录起来"></a>查看主库容器的ip并记录起来</h3><pre class=" language-shell"><code class="language-shell">docker inspect mysql-master</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011443887.png"></p><h3 id="进入主库容器"><a href="#进入主库容器" class="headerlink" title="进入主库容器"></a>进入主库容器</h3><pre class=" language-shell"><code class="language-shell">docker exec -it mysql-master /bin/bash</code></pre><h3 id="登录主库"><a href="#登录主库" class="headerlink" title="登录主库"></a>登录主库</h3><pre class=" language-shell"><code class="language-shell">mysql -uroot -proot123456 -P3308</code></pre><h3 id="创建slave数据同步用户"><a href="#创建slave数据同步用户" class="headerlink" title="创建slave数据同步用户"></a>创建slave数据同步用户</h3><pre class=" language-shell"><code class="language-shell">CREATE USER 'slave'@'%' IDENTIFIED BY 'root123456';</code></pre><pre class=" language-shell"><code class="language-shell">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';</code></pre><h3 id="在主机中查看主机当前状态"><a href="#在主机中查看主机当前状态" class="headerlink" title="在主机中查看主机当前状态"></a>在主机中查看主机当前状态</h3><pre class=" language-shell"><code class="language-shell">show master status;</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011444213.png"></p><h3 id="另起一个终端，创建从库"><a href="#另起一个终端，创建从库" class="headerlink" title="另起一个终端，创建从库"></a>另起一个终端，创建从库</h3><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/mysql/mysql-slave01/{data,conf,log}</code></pre><h3 id="创建从库配置文件my-cnf"><a href="#创建从库配置文件my-cnf" class="headerlink" title="创建从库配置文件my.cnf"></a>创建从库配置文件my.cnf</h3><pre class=" language-shell"><code class="language-shell">vim /usr/local/mysql/mysql-slave01/conf/my.cnf</code></pre><pre class=" language-shell"><code class="language-shell">[mysqld]## 设置server_id，同一局域网中需要唯一server_id=2## 指定不需要同步的数据库binlog-ignore-db=mysql## 开启二进制日志功能，以备slave作为其它数据库实例的Master时使用log-bin=mall-mysql-slave1-bin## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M## 设置使用的二进制日志格式binlog_format=mixed## 二进制日志过期清理时间，默认为0，代表不自动清理expire_logs_days=7## 忽略主从复制中遇到的所有错误活指定的错误类型，避免slave端复制中断   ## 如：1062错误码代表主键重复；1032错误码代表主从数据库数据不一致slave_skip_errors=1062## relay_log配置中继日志relay_log=mall-mysql-relay-bin## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates=1## slave设置为只读权限（具有super权限的用户除外）read_only=1</code></pre><h3 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 3309:3306 --privileged=true \-v /usr/local/mysql/mysql-slave01/log:/var/log/mysql  \-v /usr/local/mysql/mysql-slave01/data:/var/lib/mysql  \-v /usr/local/mysql/mysql-slave01/conf:/etc/mysql/conf.d \-e MYSQL_ROOT_PASSWORD=root123456 \--name mysql-slave01 mysql:5.7</code></pre><h3 id="查看从库容器的ip并记录起来"><a href="#查看从库容器的ip并记录起来" class="headerlink" title="查看从库容器的ip并记录起来"></a>查看从库容器的ip并记录起来</h3><pre class=" language-shell"><code class="language-shell">docker inspect mysql-slave01</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011445629.png"></p><h3 id="进入从库容器"><a href="#进入从库容器" class="headerlink" title="进入从库容器"></a>进入从库容器</h3><pre class=" language-shell"><code class="language-shell">docker exec -it mysql-slave01 /bin/bash</code></pre><h3 id="登录从库"><a href="#登录从库" class="headerlink" title="登录从库"></a>登录从库</h3><pre class=" language-shell"><code class="language-shell">mysql -uroot -proot123456 -P3309</code></pre><h3 id="修改一下命令对应的信息（在从库上配置主机信息）"><a href="#修改一下命令对应的信息（在从库上配置主机信息）" class="headerlink" title="修改一下命令对应的信息（在从库上配置主机信息）"></a>修改一下命令对应的信息（在从库上配置主机信息）</h3><pre class=" language-shell"><code class="language-shell">change master to master_host='172.17.0.7',master_user='slave',master_password='root123456',master_port=3306,master_log_file='mall-mysql-bin.000003',master_log_pos=617,master_connect_retry=30;</code></pre><h3 id="查看从库状态"><a href="#查看从库状态" class="headerlink" title="查看从库状态"></a>查看从库状态</h3><pre class=" language-shell"><code class="language-shell">show slave status \G</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011453134.png"><br>查看Slave_IO_Running，Slave_SQL_Running两个参数，当前为no，表示暂未开始主从同步。</p><h3 id="从机开启主从同步-然后再次查看从机状态发现两个参数为true，即表示配置成功"><a href="#从机开启主从同步-然后再次查看从机状态发现两个参数为true，即表示配置成功" class="headerlink" title="从机开启主从同步,然后再次查看从机状态发现两个参数为true，即表示配置成功"></a>从机开启主从同步,然后再次查看从机状态发现两个参数为true，即表示配置成功</h3><pre class=" language-shell"><code class="language-shell">start slave;</code></pre><pre class=" language-shell"><code class="language-shell">show slave status \G</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011456238.png"></p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> docker </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doris-1.1.3的编译</title>
      <link href="/2022/10/26/doris-1-1-3-de-bian-yi/"/>
      <url>/2022/10/26/doris-1-1-3-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、创建存放doris的目录"><a href="#1、创建存放doris的目录" class="headerlink" title="1、创建存放doris的目录"></a>1、创建存放doris的目录</h3><pre class=" language-shell"><code class="language-shell">/home/software/doris-1.1.3</code></pre><h3 id="2、下载doris-1-1-3源码"><a href="#2、下载doris-1-1-3源码" class="headerlink" title="2、下载doris-1.1.3源码"></a>2、下载doris-1.1.3源码</h3><pre class=" language-shell"><code class="language-shell">cd /home/software/doris-1.1.3</code></pre><pre class=" language-shell"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/doris/1.1/1.1.3-rc02/apache-doris-1.1.3-src.tar.gz --no-check-certificate</code></pre><h3 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf apache-doris-1.1.3-src.tar.gz </code></pre><h3 id="4、通过docker拉取docker-1-1-3对应的镜像版本-目前是这个"><a href="#4、通过docker拉取docker-1-1-3对应的镜像版本-目前是这个" class="headerlink" title="4、通过docker拉取docker-1.1.3对应的镜像版本(目前是这个)"></a>4、通过docker拉取docker-1.1.3对应的镜像版本(目前是这个)</h3><p>具体查看 <a href="https://doris.apache.org/zh-CN/docs/dev/install/source-install/compilation">https://doris.apache.org/zh-CN/docs/dev/install/source-install/compilation</a></p><pre class=" language-shell"><code class="language-shell">docker pull apache/doris:build-env-ldb-toolchain-latest</code></pre><h3 id="5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失"><a href="#5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失" class="headerlink" title="5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失"></a>5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失</h3><pre class=" language-shell"><code class="language-shell">docker run -it -v /usr/local/maven/repository:/root/.m2 -v /home/software/doris-1.1.3/apache-doris-1.1.3-src:/root/doris-1.3.0/apache-doris-1.1.3-src apache/doris:build-env-ldb-toolchain-latest</code></pre><h3 id="6、查看java的版本，默认是jdk11"><a href="#6、查看java的版本，默认是jdk11" class="headerlink" title="6、查看java的版本，默认是jdk11"></a>6、查看java的版本，默认是jdk11</h3><pre class=" language-shell"><code class="language-shell">java -version</code></pre><h3 id="7、切换到jdk8吧"><a href="#7、切换到jdk8吧" class="headerlink" title="7、切换到jdk8吧"></a>7、切换到jdk8吧</h3><pre class=" language-shell"><code class="language-shell">alternatives --set java java-1.8.0-openjdk.x86_64</code></pre><pre class=" language-shell"><code class="language-shell">alternatives --set javac java-1.8.0-openjdk.x86_64</code></pre><pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/lib/jvm/java-1.8.0</code></pre><pre class=" language-shell"><code class="language-shell">java -version</code></pre><h3 id="8、进入到doris-1-1-3目录中"><a href="#8、进入到doris-1-1-3目录中" class="headerlink" title="8、进入到doris-1.1.3目录中"></a>8、进入到doris-1.1.3目录中</h3><pre class=" language-shell"><code class="language-shell">cd doris-1.3.0/apache-doris-1.1.3-src</code></pre><h3 id="9、开始编译-至少需要两个小时"><a href="#9、开始编译-至少需要两个小时" class="headerlink" title="9、开始编译 (至少需要两个小时)"></a>9、开始编译 (至少需要两个小时)</h3><pre class=" language-shell"><code class="language-shell">sh build.sh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> doris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合RabbitMQ</title>
      <link href="/2022/09/26/springboot-zheng-he-rabbitmq/"/>
      <url>/2022/09/26/springboot-zheng-he-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2、application-yml配置如下："><a href="#2、application-yml配置如下：" class="headerlink" title="2、application.yml配置如下："></a>2、application.yml配置如下：</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx.xxx.xxx.xxx    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /yoona<span class="token punctuation">-</span>cloud</code></pre><h4 id="3、枚举关系"><a href="#3、枚举关系" class="headerlink" title="3、枚举关系"></a>3、枚举关系</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 队列枚举 * @date 2022-06-17 11:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqQueueEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有队列     */</span>        <span class="token function">Q_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送队列"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 交换机枚举 * @date 2022-06-17 11:35 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有交换机     */</span>    <span class="token function">E_TOPIC_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span><span class="token string">"topic类型的邮件发送交换机"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 路由枚举 * @date 2022-06-17 11:39 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqRoutingKeyEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有路由     */</span>    <span class="token function">K_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"K_MAIL_SEND"</span><span class="token punctuation">,</span><span class="token string">"邮件发送路由键"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 绑定关系枚举 * @date 2022-06-17 11:41 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqBindEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有绑定关系     */</span>    <span class="token function">MAIL_SEND</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">,</span> RabbitMqQueueEnum<span class="token punctuation">.</span>Q_MAIL_SEND<span class="token punctuation">,</span> RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">,</span><span class="token boolean">true</span> <span class="token punctuation">,</span><span class="token string">"MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqExchangeEnum rabbitMqExchangeEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqQueueEnum rabbitMqQueueEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqRoutingKeyEnum rabbitMqRoutingKeyEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Boolean isBind<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:54 */</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据交换机的类型，创建对应的交换机     */</span>    <span class="token function">DIRECT</span><span class="token punctuation">(</span><span class="token string">"direct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">TOPIC</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RabbitMqExchangeTypeEnum <span class="token function">getInstanceByType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"无效的exchange type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String type<span class="token punctuation">;</span>    <span class="token function">RabbitMqExchangeTypeEnum</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建交换机     * @param exchangeName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqBindEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>message<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableRabbit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>config<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>RabbitTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactoryConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:50 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>EnableRabbit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customContainerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">containerFactory</span><span class="token punctuation">(</span>SimpleRabbitListenerContainerFactoryConfigurer configurer<span class="token punctuation">,</span>                                                                 ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setMaxConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitTransactionManager <span class="token function">rabbitTransactionManager</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTransactionManager</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建交换机</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqExchangeEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Exchange exchange <span class="token operator">=</span> RabbitMqExchangeTypeEnum                                <span class="token punctuation">.</span><span class="token function">getInstanceByType</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">createExchange</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建交换机时发生异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建队列并绑定exchange</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqBindEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getIsBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 无需绑定</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqExchangeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqRoutingKeyEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5、实际应用例子"><a href="#5、实际应用例子" class="headerlink" title="5、实际应用例子"></a>5、实际应用例子</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>        RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>mailTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>onConstructor <span class="token operator">=</span> <span class="token annotation punctuation">@__</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSendListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理监到消息逻辑xxx...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus引入p6spy打印执行SQL</title>
      <link href="/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/"/>
      <url>/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/</url>
      
        <content type="html"><![CDATA[<p>引入p6spy方便查看执行日志，<code>MyBatis-Plus3.2.1以上</code>使用</p><p><a href="https://baomidou.com/pages/833fab/">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>最新版本<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。</p><p><a href="https://mvnrepository.com/artifact/p6spy/p6spy">地址</a></p><h4 id="2、application-yml-配置"><a href="#2、application-yml-配置" class="headerlink" title="2、application.yml 配置"></a>2、application.yml 配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token punctuation">...</span></code></pre><h4 id="3、spy-properties-配置"><a href="#3、spy-properties-配置" class="headerlink" title="3、spy.properties 配置"></a>3、spy.properties 配置</h4><pre class=" language-text"><code class="language-text">#3.2.1以上使用modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory#3.2.1以下使用或者不配置#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory# 自定义日志打印logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger#日志输出到控制台appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger# 使用日志系统记录 sql#appender=com.p6spy.engine.spy.appender.Slf4JLogger# 设置 p6spy driver 代理deregisterdrivers=true# 取消JDBC URL前缀useprefix=true# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.excludecategories=info,debug,result,commit,resultset# 日期格式dateformat=yyyy-MM-dd HH:mm:ss# 实际驱动可多个#driverlist=org.h2.Driver# 是否开启慢SQL记录outagedetection=true# 慢SQL记录标准 2 秒outagedetectioninterval=2</code></pre><h4 id="4、执行效果："><a href="#4、执行效果：" class="headerlink" title="4、执行效果："></a>4、执行效果：</h4><pre class=" language-text"><code class="language-text"> Consume Time：3 ms 2022-09-23 14:45:47 Execute SQL：SELECT t1.id source_id, t1.source_name, t2.id table_id, t2.table_name FROM `st_source` t1 LEFT JOIN st_table t2 ON t1.source_hash_code = t2.source_hash_code WHERE t1.is_delete = 0 AND t2.is_delete = 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus多数据源切换</title>
      <link href="/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/"/>
      <url>/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dynamic<span class="token operator">-</span>datasource<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。<a href="https://mvnrepository.com/artifact/com.baomidou/dynamic-datasource-spring-boot-starter">地址</a></p><h4 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true">#设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3306/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver <span class="token comment" spellcheck="true"># 3.2.0开始支持SPI可省略此配置</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3307/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> ENC(xxxxx) <span class="token comment" spellcheck="true"># 内置加密,使用请查看详细文档</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver       <span class="token comment" spellcheck="true">#......省略</span>       <span class="token comment" spellcheck="true">#以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 多主多从                      纯粹多库（记得设置primary）                   混合配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master_1</span><span class="token punctuation">:</span>                             <span class="token key atrule">mysql</span><span class="token punctuation">:</span>                                <span class="token key atrule">master</span><span class="token punctuation">:</span>        <span class="token key atrule">master_2</span><span class="token punctuation">:</span>                             <span class="token key atrule">oracle</span><span class="token punctuation">:</span>                               <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>                              <span class="token key atrule">sqlserver</span><span class="token punctuation">:</span>                            <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>                              <span class="token key atrule">postgresql</span><span class="token punctuation">:</span>                           <span class="token key atrule">oracle_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_3</span><span class="token punctuation">:</span>                              <span class="token key atrule">h2</span><span class="token punctuation">:</span>                                   <span class="token key atrule">oracle_2</span><span class="token punctuation">:</span></code></pre><h4 id="3、使用-DS切换数据源"><a href="#3、使用-DS切换数据源" class="headerlink" title="3、使用@DS切换数据源"></a>3、使用@DS切换数据源</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>  <span class="token keyword">public</span> List <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user where age >10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 多数据源 </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局异常处理类</title>
      <link href="/2022/09/23/quan-ju-yi-chang-chu-li-lei/"/>
      <url>/2022/09/23/quan-ju-yi-chang-chu-li-lei/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>response<span class="token punctuation">.</span>SystemResponse<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultMessageSourceResolvable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 全局异常处理类 * @date 2022-03-24 15:15 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生异常，异常摘要：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理Get请求中 使用@Valid 验证路径中请求实体校验失败后抛出的异常     *     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> BindException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理请求参数格式错误     *     * @param request     * @param e     * @return     * @RequestBody 上使用@Valid实体上使用@NotNull等，验证失败后抛出的异常是MethodArgumentNotValidException异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取@Valid、@Validated的异常信息     *     * @param e     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>BindingResult e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>DefaultMessageSourceResolvable<span class="token operator">:</span><span class="token operator">:</span>getDefaultMessage<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 全局异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽取基本枚举接口</title>
      <link href="/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/"/>
      <url>/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/</url>
      
        <content type="html"><![CDATA[<h4 id="抽取公共的枚举类，方便一些场景下的使用"><a href="#抽取公共的枚举类，方便一些场景下的使用" class="headerlink" title="抽取公共的枚举类，方便一些场景下的使用"></a>抽取公共的枚举类，方便一些场景下的使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtil<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EnumSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 基本枚举接口 * @date 2022-04-24 09:26 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取值     *     * @return     */</span>    T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取值的描述     *     * @return     */</span>    String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取枚举     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> E <span class="token function">getEnumByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文本标签获取值     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> String <span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取描述     *     * @param description     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> Object <span class="token function">getValueByDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实际使用如下"><a href="#实际使用如下" class="headerlink" title="实际使用如下"></a>实际使用如下</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 所有状态枚举 * @date 2022-04-22 10:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有状态     */</span>    <span class="token function">ENABLE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"启用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DISABLED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"禁用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer value<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取整个枚举</span>    StatusEnum statusEnum <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：启用</span>    String description <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：0</span>    Integer value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getValueByDescription</span><span class="token punctuation">(</span><span class="token string">"启用"</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp实现虚拟机centos的内网穿透</title>
      <link href="/2022/09/21/frp-shi-xian-xu-ni-ji-centos-de-nei-wang-chuan-tou/"/>
      <url>/2022/09/21/frp-shi-xian-xu-ni-ji-centos-de-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h3 id="需要一台有公网ip的服务器和随便一台虚拟机centos"><a href="#需要一台有公网ip的服务器和随便一台虚拟机centos" class="headerlink" title="需要一台有公网ip的服务器和随便一台虚拟机centos"></a>需要一台有公网ip的服务器和随便一台虚拟机centos</h3><h2 id="含公网ip的服务器配置如下："><a href="#含公网ip的服务器配置如下：" class="headerlink" title="含公网ip的服务器配置如下："></a>含公网ip的服务器配置如下：</h2><h3 id="1、下载frp"><a href="#1、下载frp" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_arm64.tar.gz</code></pre><h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/usr/local下吧并重命名，个人习惯"></a>3、移动到/usr/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frpc*</code></pre><h3 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><pre class=" language-shell"><code class="language-shell">vim frps.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frps.ini[common]bind_port = 7000authentication_method = token# 认证密码，需要与客户端一致token = 12345678</code></pre><h3 id="7、配置成服务的方式启动吧"><a href="#7、配置成服务的方式启动吧" class="headerlink" title="7、配置成服务的方式启动吧"></a>7、配置成服务的方式启动吧</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frps.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frps daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令"><a href="#8、一些命令" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frps</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frps</code></pre><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frps</code></pre><h2 id="客户端虚拟机配置如下："><a href="#客户端虚拟机配置如下：" class="headerlink" title="客户端虚拟机配置如下："></a>客户端虚拟机配置如下：</h2><h3 id="1、下载frp-1"><a href="#1、下载frp-1" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_arm64.tar.gz</code></pre><h3 id="2、解压-1"><a href="#2、解压-1" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/use/local下吧并重命名，个人习惯"></a>3、移动到/use/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp-1"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp-1" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frps*</code></pre><h3 id="6、修改配置文件-frpc-ini"><a href="#6、修改配置文件-frpc-ini" class="headerlink" title="6、修改配置文件 frpc.ini"></a>6、修改配置文件 frpc.ini</h3><pre class=" language-shell"><code class="language-shell">vim frpc.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frpc.ini[common]# 对应外网服务器的ip和端口server_addr = 43.142.62.156server_port = 7000authentication_method = token# 认证密码，需要与服务端一致token = 12345678[ssh]type = tcplocal_ip = 127.0.0.1# 本机的服务端口local_port = 22# 让外网服务器开启的端口（需要防火墙放行）remote_port = 12900</code></pre><h3 id="7、设置为启动服务"><a href="#7、设置为启动服务" class="headerlink" title="7、设置为启动服务"></a>7、设置为启动服务</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frpc.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frpc daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令-1"><a href="#8、一些命令-1" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frpc</code></pre><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frpc</code></pre><h5 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frpc</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> ssh </category>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> ssh </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录（三台虚拟机之间两两免密登录）</title>
      <link href="/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/"/>
      <url>/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="现有三台centos的虚拟机，要求两两之间实现免密登录"><a href="#现有三台centos的虚拟机，要求两两之间实现免密登录" class="headerlink" title="现有三台centos的虚拟机，要求两两之间实现免密登录"></a>现有三台centos的虚拟机，要求两两之间实现免密登录</h1><p>192.168.118.128<br>192.168.118.129<br>192.168.118.130</p><h3 id="1、三台虚拟机都执行以下命令："><a href="#1、三台虚拟机都执行以下命令：" class="headerlink" title="1、三台虚拟机都执行以下命令："></a>1、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa</code></pre><h3 id="2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）"><a href="#2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）" class="headerlink" title="2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）"></a>2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）</h3><pre class=" language-shell"><code class="language-shell">cd ~/.ssh/</code></pre><h3 id="3、三台虚拟机都执行以下命令："><a href="#3、三台虚拟机都执行以下命令：" class="headerlink" title="3、三台虚拟机都执行以下命令："></a>3、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">touch authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">chmod 600 authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">cat id_rsa.pub >> authorized_keys</code></pre><h4 id="此时，三个虚拟机的当前目录都为-ssh下"><a href="#此时，三个虚拟机的当前目录都为-ssh下" class="headerlink" title="此时，三个虚拟机的当前目录都为.ssh下"></a>此时，三个虚拟机的当前目录都为.ssh下</h4><h3 id="4、把129的公钥追加到128的authorized-keys"><a href="#4、把129的公钥追加到128的authorized-keys" class="headerlink" title="4、把129的公钥追加到128的authorized_keys"></a>4、把129的公钥追加到128的authorized_keys</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令"><a href="#点击切换到128的连接，在128上执行如下命令" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到129的authorized-keys"><a href="#把128的公钥追加到129的authorized-keys" class="headerlink" title="把128的公钥追加到129的authorized_keys"></a>把128的公钥追加到129的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令"><a href="#点击切换到129的连接，在129上执行如下命令" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"><a href="#此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似" class="headerlink" title="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"></a>此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似</h4><h3 id="5、把130的公钥追加到128的authorized-keys-130上"><a href="#5、把130的公钥追加到128的authorized-keys-130上" class="headerlink" title="5、把130的公钥追加到128的authorized_keys  (130上)"></a>5、把130的公钥追加到128的authorized_keys  (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令-1"><a href="#点击切换到128的连接，在128上执行如下命令-1" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到130的authorized-keys"><a href="#把128的公钥追加到130的authorized-keys" class="headerlink" title="把128的公钥追加到130的authorized_keys"></a>把128的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令"><a href="#点击切换到130的连接，在130上执行如下命令" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了128与130之间的免密"><a href="#此时实现了128与130之间的免密" class="headerlink" title="此时实现了128与130之间的免密"></a>此时实现了128与130之间的免密</h4><h3 id="6、把130的公钥追加到129的authorized-keys-130上"><a href="#6、把130的公钥追加到129的authorized-keys-130上" class="headerlink" title="6、把130的公钥追加到129的authorized_keys (130上)"></a>6、把130的公钥追加到129的authorized_keys (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令-1"><a href="#点击切换到129的连接，在129上执行如下命令-1" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把129的公钥追加到130的authorized-keys"><a href="#把129的公钥追加到130的authorized-keys" class="headerlink" title="把129的公钥追加到130的authorized_keys"></a>把129的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令-1"><a href="#点击切换到130的连接，在130上执行如下命令-1" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了129与130之间的免密"><a href="#此时实现了129与130之间的免密" class="headerlink" title="此时实现了129与130之间的免密"></a>此时实现了129与130之间的免密</h4><h3 id="6、两两之间校验"><a href="#6、两两之间校验" class="headerlink" title="6、两两之间校验"></a>6、两两之间校验</h3><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.128</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.129</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.130</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装jdk</title>
      <link href="/2022/08/04/centos-an-zhuang-jdk/"/>
      <url>/2022/08/04/centos-an-zhuang-jdk/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装maven</title>
      <link href="/2022/08/04/centos-an-zhuang-maven/"/>
      <url>/2022/08/04/centos-an-zhuang-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local</code></pre><h2 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h2><pre class=" language-shell"><code class="language-shell">wget https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -xvf apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><pre class=" language-shell"><code class="language-shell">mv apache-maven-3.6.3 maven</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><pre class=" language-shell"><code class="language-shell">export PATH=/usr/local/maven/bin:$PATH</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><pre class=" language-shell"><code class="language-shell">mvn -V</code></pre><h2 id="进入maven"><a href="#进入maven" class="headerlink" title="进入maven"></a>进入maven</h2><pre class=" language-shell"><code class="language-shell">cd maven</code></pre><h2 id="创建repository目录"><a href="#创建repository目录" class="headerlink" title="创建repository目录"></a>创建repository目录</h2><pre class=" language-shell"><code class="language-shell">mkdir repository</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class=" language-shell"><code class="language-shell">cd conf/</code></pre><pre class=" language-shell"><code class="language-shell">vim settings.xml</code></pre><h2 id="配置依赖存储路径"><a href="#配置依赖存储路径" class="headerlink" title="配置依赖存储路径"></a>配置依赖存储路径</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>localRepository<span class="token operator">></span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>maven<span class="token operator">/</span>repository<span class="token operator">&lt;</span><span class="token operator">/</span>localRepository<span class="token operator">></span></code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>mirror<span class="token operator">></span>    <span class="token operator">&lt;</span>id<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose命令</title>
      <link href="/2022/08/04/docker-compose-ming-ling/"/>
      <url>/2022/08/04/docker-compose-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="停掉服务，删除容器，不删除镜像"><a href="#停掉服务，删除容器，不删除镜像" class="headerlink" title="停掉服务，删除容器，不删除镜像"></a>停掉服务，删除容器，不删除镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose down</code></pre><h2 id="重启-x2F-开始-x2F-停止服务"><a href="#重启-x2F-开始-x2F-停止服务" class="headerlink" title="重启/开始/停止服务"></a>重启/开始/停止服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose restart/start/stop [服务名称]</code></pre><h2 id="运行某个服务"><a href="#运行某个服务" class="headerlink" title="运行某个服务"></a>运行某个服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose run [服务名称]</code></pre><h2 id="查看服务中使用的镜像"><a href="#查看服务中使用的镜像" class="headerlink" title="查看服务中使用的镜像"></a>查看服务中使用的镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose images [服务名称]</code></pre><h2 id="重新构建（强制删除之前的镜像重新打）并启动"><a href="#重新构建（强制删除之前的镜像重新打）并启动" class="headerlink" title="重新构建（强制删除之前的镜像重新打）并启动"></a>重新构建（强制删除之前的镜像重新打）并启动</h2><pre class=" language-shell"><code class="language-shell">docker-compose up -d --build --force-recreate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装与搭建</title>
      <link href="/2022/07/01/hexo-an-zhuang-yu-da-jian/"/>
      <url>/2022/07/01/hexo-an-zhuang-yu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><pre class=" language-shell"><code class="language-shell">hexo init blog</code></pre><pre class=" language-shell"><code class="language-shell">cd blog</code></pre><pre class=" language-shell"><code class="language-shell">npm install</code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre class=" language-shell"><code class="language-shell">hexo s</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2022/07/01/docker-chang-yong-ming-ling/"/>
      <url>/2022/07/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl start docker</code></pre><h2 id="关闭docker服务"><a href="#关闭docker服务" class="headerlink" title="关闭docker服务"></a>关闭docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl stop docker</code></pre><h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl restart docker</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><pre class=" language-shell"><code class="language-shell">docker search java</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull java:8</code></pre><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><pre class=" language-shell"><code class="language-shell">docker images</code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><ul><li>指定名称删除镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi java:8</code></pre><ul><li>指定名称删除镜像（强制）</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f java:8</code></pre><ul><li>删除所有没有引用的镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi `docker images | grep none | awk '{print $3}'`</code></pre><ul><li>强制删除所有镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f $(docker images)</code></pre><h2 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h2><ul><li>列出运行中的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><ul><li>列出所有容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><pre class=" language-shell"><code class="language-shell">docker stop $ContainerName(or $ContainerId)</code></pre><h2 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h2><pre class=" language-shell"><code class="language-shell">docker kill $ContainerName</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker start $ContainerName</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><ul><li>先查询出容器的pid</li></ul><pre class=" language-shell"><code class="language-shell">docker inspect --format "{{.State.Pid}}" $ContainerName</code></pre><ul><li>根据容器的pid进入容器</li></ul><pre class=" language-shell"><code class="language-shell">nsenter --target "$pid" --mount --uts --ipc --net --pid</code></pre><h2 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h2><pre class=" language-shell"><code class="language-shell">docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ContainerName</code></pre><h2 id="将容器启动方式改为always"><a href="#将容器启动方式改为always" class="headerlink" title="将容器启动方式改为always"></a>将容器启动方式改为always</h2><pre class=" language-shell"><code class="language-shell"># 将容器启动方式改为alwaysdocker container update --restart=always $ContainerName</code></pre><h2 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h2><pre class=" language-shell"><code class="language-shell">docker cp /etc/localtime $ContainerName:/etc/</code></pre><h2 id="指定容器时区"><a href="#指定容器时区" class="headerlink" title="指定容器时区"></a>指定容器时区</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-d nginx:1.17.0</code></pre><h2 id="查看容器资源占用状况"><a href="#查看容器资源占用状况" class="headerlink" title="查看容器资源占用状况"></a>查看容器资源占用状况</h2><ul><li>查看指定容器资源占用状况，比如cpu、内存、网络、io状态</li></ul><pre class=" language-shell"><code class="language-shell">docker stats $ContainerName</code></pre><ul><li>查看所有容器资源占用情况</li></ul><pre class=" language-shell"><code class="language-shell">docker stats -a</code></pre><h2 id="查看容器磁盘使用情况"><a href="#查看容器磁盘使用情况" class="headerlink" title="查看容器磁盘使用情况"></a>查看容器磁盘使用情况</h2><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><h2 id="执行容器内部命令"><a href="#执行容器内部命令" class="headerlink" title="执行容器内部命令"></a>执行容器内部命令</h2><pre class=" language-shell"><code class="language-shell">docker exec -it $ContainerName /bin/bash</code></pre><h2 id="指定账号进入容器内部"><a href="#指定账号进入容器内部" class="headerlink" title="指定账号进入容器内部"></a>指定账号进入容器内部</h2><pre class=" language-shell"><code class="language-shell"># 使用root账号进入容器内部docker exec -it --user root $ContainerName /bin/bash</code></pre><h2 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h2><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre><h2 id="创建外部网络"><a href="#创建外部网络" class="headerlink" title="创建外部网络"></a>创建外部网络</h2><pre class=" language-shell"><code class="language-shell">docker network create -d bridge my-bridge-network</code></pre><h2 id="指定容器网络"><a href="#指定容器网络" class="headerlink" title="指定容器网络"></a>指定容器网络</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \--network my-bridge-network \-d nginx:1.17.0</code></pre><h2 id="Docker容器清理"><a href="#Docker容器清理" class="headerlink" title="Docker容器清理"></a>Docker容器清理</h2><ul><li>查看Docker占用的磁盘空间情况</li></ul><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><ul><li>删除所有关闭的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm</code></pre><ul><li>删除所有dangling镜像(没有Tag的镜像)</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images | grep "^<none>" | awk "{print $3}")</code></pre><ul><li>删除所有dangling数据卷(即无用的 volume)</li></ul><pre class=" language-shell"><code class="language-shell">docker volume rm $(docker volume ls -qf dangling=true)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh配置</title>
      <link href="/2022/07/01/git-pei-zhi-ssh/"/>
      <url>/2022/07/01/git-pei-zhi-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h2><pre class=" language-shell"><code class="language-shell">git config --global user.name "yoonada"</code></pre><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><pre class=" language-shell"><code class="language-shell">git config --global user.email "m15602498163@163.com"</code></pre><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h2><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "m15602498163@163.com"</code></pre><h2 id="生成路径"><a href="#生成路径" class="headerlink" title="生成路径"></a>生成路径</h2><pre class=" language-text"><code class="language-text">window的生成路径：C:\Users\用户\.sshLinux的生成路径：/etc/ssh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装RabbitMQ</title>
      <link href="/2022/07/01/docker-an-zhuang-rabbitmq/"/>
      <url>/2022/07/01/docker-an-zhuang-rabbitmq/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d --restart=always rabbitmq:management</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/2022/07/01/docker-an-zhuang-redis/"/>
      <url>/2022/07/01/docker-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name redis -p 6380:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass "DD123456aa"</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nacos</title>
      <link href="/2022/07/01/docker-an-zhuang-nacos/"/>
      <url>/2022/07/01/docker-an-zhuang-nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull nacos/nacos-server:1.4.2</code></pre><h2 id="创建临时容器（用来拷贝配置、日志使用）"><a href="#创建临时容器（用来拷贝配置、日志使用）" class="headerlink" title="创建临时容器（用来拷贝配置、日志使用）"></a>创建临时容器（用来拷贝配置、日志使用）</h2><pre class=" language-shell"><code class="language-shell">docker run -p 8848:8848 --name nacostest -d nacos/nacos-server:1.4.2</code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/conf</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/logs</code></pre><h2 id="配置文件复制"><a href="#配置文件复制" class="headerlink" title="配置文件复制"></a>配置文件复制</h2><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/logs/ /mydata/nacos/</code></pre><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/conf/ /mydata/nacos/</code></pre><h2 id="删除临时容器"><a href="#删除临时容器" class="headerlink" title="删除临时容器"></a>删除临时容器</h2><pre class=" language-shell"><code class="language-shell">docker stop nacostest</code></pre><pre class=" language-shell"><code class="language-shell">docker rm nacostest</code></pre><h2 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run -d \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_SERVICE_HOST=43.142.62.156 \-e MYSQL_SERVICE_PORT=3307 \-e MYSQL_SERVICE_USER=root \-e MYSQL_SERVICE_PASSWORD=DD123456aa \-e MYSQL_SERVICE_DB_NAME=nacos_config \-e TIME_ZONE='Asia/Shanghai' \-v /mydata/nacos/logs:/home/nacos/logs \-v /mydata/nacos/conf:/home/nacos/conf \-p 8848:8848 \--name nacos \--restart=always \nacos/nacos-server:1.4.2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL</title>
      <link href="/2022/07/01/docker-an-zhuang-mysql/"/>
      <url>/2022/07/01/docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取5-7的镜像"><a href="#拉取5-7的镜像" class="headerlink" title="拉取5.7的镜像"></a>拉取5.7的镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run --name mysql -p 3307:3306 --restart=always -e MYSQL_ROOT_PASSWORD=DD123456aa -d mysql:5.7</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-shell"><code class="language-shell">docker exec -it mysql bash</code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'DD123456aa';</code></pre><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos常用命令</title>
      <link href="/2022/07/01/centos-chang-yong-ming-ling/"/>
      <url>/2022/07/01/centos-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl start firewalld</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld</code></pre><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><pre class=" language-shell"><code class="language-shell">systemctl status firewalld </code></pre><h2 id="开放某个端口"><a href="#开放某个端口" class="headerlink" title="开放某个端口"></a>开放某个端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><h2 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a>查看已经开放的端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --list-ports</code></pre><h2 id="查找（在-中填写你要的查找的路径）"><a href="#查找（在-中填写你要的查找的路径）" class="headerlink" title="查找（在**中填写你要的查找的路径）"></a>查找（在**中填写你要的查找的路径）</h2><pre class=" language-shell"><code class="language-shell">find / -name **</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装nginx</title>
      <link href="/2022/07/01/centos-an-zhuang-nginx/"/>
      <url>/2022/07/01/centos-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-shell"><code class="language-shell">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></pre><h2 id="下载稳定版本"><a href="#下载稳定版本" class="headerlink" title="下载稳定版本"></a>下载稳定版本</h2><pre class=" language-shell"><code class="language-shell">wget http://nginx.org/download/nginx-1.16.1.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf nginx-1.16.1.tar.gz</code></pre><h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd nginx-1.16.1</code></pre><h2 id="配置编译"><a href="#配置编译" class="headerlink" title="配置编译"></a>配置编译</h2><pre class=" language-shell"><code class="language-shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell">make && make install</code></pre><h2 id="被安装的目录"><a href="#被安装的目录" class="headerlink" title="被安装的目录"></a>被安装的目录</h2><pre class=" language-shell"><code class="language-shell">/usr/local/nginx/</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker-compose</title>
      <link href="/2022/07/01/centos-an-zhuang-docker-compose/"/>
      <url>/2022/07/01/centos-an-zhuang-docker-compose/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x /usr/local/bin/docker-compose</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装docker</title>
      <link href="/2022/07/01/centos-an-zhuang-docker/"/>
      <url>/2022/07/01/centos-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h2 id="安装配置相关依赖"><a href="#安装配置相关依赖" class="headerlink" title="安装配置相关依赖"></a>安装配置相关依赖</h2><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h2 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h2><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><h2 id="验证是否正确安装"><a href="#验证是否正确安装" class="headerlink" title="验证是否正确安装"></a>验证是否正确安装</h2><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://9w9zqgnf.mirror.aliyuncs.com"]}EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl daemon-reload</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
